Ok. This time we will talk about track events and cue events. So first, let's start by a small demonstration. If I play this video, the video is going on and I can listen to events like 'cuenter' and 'cueexit'. Each time a new cue is entered, we will display it here, and each time it is exited, we will display it here. We saw that we can display them in sync with the video now. So each time a cue is reached, it means that the current time entered a new time segment defined by the starting and ending time of a cue. Let's have a look again at one of the VTT files. Each cue holds a start time and a end time so when the time enters the 15th second, we've got a cueenter event and we can get this content and show it on the HTML page. When we go out of this time period, when we go further than 18 seconds, we exit this cue and we enter this cue. How are these events handled in the JavaScript code? Everything is done in the readContent method that we saw earlier. This time instead of iterating on different cues of the TextTrack, we will just, for each cue individualy, we will iterate on the cues and add a listener on that cue, an exist listener and an enter listener. So what do we do? We iterate in the cues called addCueListenners for the current cue. This method, addCueListeners, it will define two listeners: the cue enter listener and the cue exit event listener. On the cue enter listener we just create a string "entered cue id=" and "text=" that will correspond to the text displayed when a cue is just reached. We display the id and we display the text. The same thing is done when we exit, when we exit we just display the id "exited cue id=". This is how we can have individual enter and exit listeners for each cue. It will enable us to highlight the current cue in a transcript while the video is playing. The only problem is that as of December 2015, FireFox still does not recognize this sort of listeners. The implementation is not done yet, so you can use a fallback. You can use a listener on the track that will listen to the 'cuechange' event. So if I just comment the function addCueListeners and I uncomment this piece of code that has a cueChange listener on the track itself, then instead of knowing that we entered of exited and individual cue, we can get, for every new time segment, the list of the cues that are triggered, that should be activated and displayed for this time segment. As the different cues can overlap, the time segments can overlap -it is not often the case but it may occur- what the callback function from this listenner gives is a list of active cues. Most of the time you have got only one. Anyway you can just work with the list of the cues. Here we just take the first active cue because we are assuming that the cues are not overlapping. I added a small test here because sometimes we've got some strange ghost cues that are active and not defined. I do not exactly what was the problem when I test it but I added this test here to avoid some error messages... We have got the first active cue and we just display it. We get the id, we get the text and this is all. In that case, if I run the application again, instead of having enter and exit, I will just have cue change events. It starts at 15 seconds. I had a small bug here, it is not this.id but cue.id.... wa can start again. This is a fallback for FireFox if you want to display the cues in sync with the video. The next video will show how to display a transcript here with the current cue highlighted and you can click on them in order to jump to the right place in the video. After that I think we will have seen the most useful properties, methods, events you can use with tracks and cues...