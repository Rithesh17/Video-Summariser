Numbers are one type of object in Python. And Python, in fact, provides three different numeric types. These are called integers, floating point numbers, and complex numbers. One of the interesting things about Python integers is that they have unlimited precision. That means your integer will never be too long to fit into Python&#39;s integer type. Another important aspect to realize about numbers is that you can freely mix different numeric types. All Python numbers support all the usual arithmetic operations. And let&#39;s try a few of them out right now. The basics, like addition and multiplication are, of course, easy. We can also raise a number to a power. And you&#39;ll see that if we increase the exponent a little bit, the result is going to be a very large number, but that&#39;s not going to be a problem. Again, Python has unlimited precision for integers. Let&#39;s try out division. Division is accomplished using the slash. So for example, if we say 6 divided by 7, Python gives us the floating point answer. Sometimes, however, we might want to do what&#39;s called floor division, or integer division. This is accomplished by using two slash signs. In this case, let&#39;s do something like 15 divided by 7, which in a floating point is 2.14. If we use integer division, Python is going to give us an answer of 2. So what happened here is the following: Python carries out the division as usual and that gives you the number 2.14. It then rounds that number to the closest integer, which is less than the actual floating point answer. So 2.14, a floating point number, gets rounded down to the closer, smaller integer, which is 2. The interactive mode in Python provides a very useful operation which is the underscore operator. And the value of the underscore operator is always the last object that Python has returned to you. So let&#39;s see what that means. Let&#39;s do a simple division-- 15 divided by 2.3, say. Python tells us that it&#39;s 6.521 and so on. Now, if I hit underscore, Python is returning the value of the latest operation. Say I wanted to multiply this number with 2.3, which would give me back the number of 15. So I can do that in the following way. I just take the underscore, I multiply that by 2.3, and the answer is 15. This is especially handy in the interactive mode if you&#39;d like to change a few calculations. So let&#39;s try one example. Let&#39;s first start with 10 times 2. That&#39;s 20. Let&#39;s take that number, let&#39;s add 5 to it, and let&#39;s then take that number 25 raise that to the second power. In this case, the answer is 625. Very commonly we need to go beyond the built-in functions and operations that Python provides. And one way to do this for numbers is to use the math module, which contains some basic mathematical operations, like the factorial. Let&#39;s just quickly remind ourselves, what is the factorial operation. So the factorial of n, indicated by exclamation mark, is n times n minus 1 all the way times 2 times 1. And so for example, 3 factorial would be equal to 3 times 2 times 1, which is 6. Now, the question is, how could we implement this simple calculation in Python? Let&#39;s start by importing the math module. So we type import math. And the function we&#39;re interested in is math.factorial. So the argument in this case would be 3, and Python tells us 3 factorial is equal to 6.