WEBVTT - https://subtitletools.com

00:00:06.800 --> 00:00:10.790
Ranges are immutable sequences of integers,

00:00:10.790 --> 00:00:13.940
and they are commonly used in for loops.

00:00:13.940 --> 00:00:17.840
To create a range object, we type &quot;range&quot;

00:00:17.840 --> 00:00:22.360
and then we put in the stopping value of the range.

00:00:22.360 --> 00:00:27.860
Now, we&#39;ve just created a range object, but this is less helpful

00:00:27.860 --> 00:00:32.270
if you would like to see what&#39;s the actual content of that object.

00:00:32.270 --> 00:00:35.510
Although, we wouldn&#39;t typically do this in a Python program,

00:00:35.510 --> 00:00:38.970
for us to really see the content of that range object,

00:00:38.970 --> 00:00:42.980
so what we can do in this case is we can turn it into a list.

00:00:42.980 --> 00:00:49.040
So if we say &quot;list of range 5,&quot; we&#39;ll see that the range object consists

00:00:49.040 --> 00:00:52.910
of five numbers, from 0 to 4.

00:00:52.910 --> 00:00:57.530
The input argument to range is the stopping value.

00:00:57.530 --> 00:01:01.450
And remember, Python stops before it hits the stopping value.

00:01:01.450 --> 00:01:06.830
That&#39;s why range 5 does actually not contain the number 5.

00:01:06.830 --> 00:01:10.340
We can provide additional arguments to the range function.

00:01:10.340 --> 00:01:13.530
For example, we can provide the starting point,

00:01:13.530 --> 00:01:17.240
and we can also define the step size.

00:01:17.240 --> 00:01:23.090
So if we type &quot;range 1 to 6,&quot; in that case,

00:01:23.090 --> 00:01:29.280
we get a range object which starts at 1 and ends at 5.

00:01:29.280 --> 00:01:33.780
If we wanted to go in increments of two, we could do something like this.

00:01:33.780 --> 00:01:38.270
We could start from 1, go up to 13-- number 13,

00:01:38.270 --> 00:01:43.190
not itself included-- and we could go in steps of two.

00:01:43.190 --> 00:01:49.760
In this case, we get a range object that starts at 1 and ends at 11.

00:01:49.760 --> 00:01:54.050
Typically when we use range objects in our Python programs,

00:01:54.050 --> 00:01:56.990
we do not first turn them into lists.

00:01:56.990 --> 00:01:59.450
We&#39;ve done it here only so that it&#39;s easier for us

00:01:59.450 --> 00:02:02.960
to understand what these objects do.

00:02:02.960 --> 00:02:07.280
You can certainly use a list object in a for loop context,

00:02:07.280 --> 00:02:10.220
but it&#39;s problematic for the following reason.

00:02:10.220 --> 00:02:14.940
To store a range object, Python is only storing three different numbers,

00:02:14.940 --> 00:02:19.460
which are the starting number, the stopping number, and its step size.

00:02:19.460 --> 00:02:24.680
If you have a very large dataset that contains, say, 10 million objects,

00:02:24.680 --> 00:02:29.390
if you first create a list that contains the indices for accessing

00:02:29.390 --> 00:02:33.380
these 10 million numbers, you&#39;ve just wasted a lot of space just

00:02:33.380 --> 00:02:36.030
to be able to loop through your data.

00:02:36.030 --> 00:02:39.380
Consequently, use range objects as is.

00:02:39.380 --> 00:02:43.390
Don&#39;t turn them into lists before using them.
