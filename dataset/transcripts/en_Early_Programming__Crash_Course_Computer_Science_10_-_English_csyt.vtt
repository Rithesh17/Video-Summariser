WEBVTT - https://subtitletools.com

00:00:02.780 --> 00:00:05.880
Hi, I'm Carrie Anne and welcome to Crash Course Computer Science.

00:00:05.940 --> 00:00:07.420
Over the last few episodes,

00:00:07.600 --> 00:00:10.260
We've talked a lot about the mechanics of how computers work.

00:00:10.400 --> 00:00:13.560
How they use complex circuits to save and retrieve values from memory,

00:00:13.560 --> 00:00:15.360
and perform operations on those values,

00:00:15.360 --> 00:00:16.800
like adding two numbers together.

00:00:17.100 --> 00:00:19.800
We've even briefly talked about sequences of operations,

00:00:19.800 --> 00:00:21.180
which is a computer program.

00:00:21.180 --> 00:00:22.612
What we haven't talked about

00:00:22.612 --> 00:00:24.520
is how a program gets into a computer.

00:00:24.640 --> 00:00:25.980
You might remember in episode 7 and 8 ,

00:00:25.980 --> 00:00:30.400
when we stepped through some simple example programs for the CPU that we had created.

00:00:30.580 --> 00:00:33.100
For simplicity, we just waved our hands

00:00:33.100 --> 00:00:35.009
and said that the program was already magically in memory.

00:00:35.040 --> 00:00:38.880
But in reality, programs have to be loaded into a computer's memory.

00:00:38.880 --> 00:00:40.600
It's not magic. It's computer science.

00:00:40.700 --> 00:00:49.400
[Theme Music]

00:00:49.540 --> 00:00:53.440
The need to programme machines existed way before the development of computers.

00:00:53.440 --> 00:00:56.580
The most famous example of this was in textile manufacturing.

00:00:56.780 --> 00:00:58.760
if you just wanted to weave a big red tablecloth,

00:00:58.940 --> 00:01:01.700
you could simply feed red thread into a loom and let it run.

00:01:01.710 --> 00:01:04.979
But what about if you wanted the cloth to have a pattern like stripes or plaid?

00:01:05.400 --> 00:01:09.580
Workers would have to periodically reconfigure the loom as dictated by the pattern,

00:01:09.580 --> 00:01:12.720
but this was labor intensive which made patterned fabrics expensive.

00:01:12.880 --> 00:01:16.920
In response, Joseph Marie Jacquard developed a programmable textile loom,

00:01:16.920 --> 00:01:18.760
which he first demonstrated in 1801.

00:01:18.760 --> 00:01:21.900
The pattern for each row of the cloth was defined by a punched card.

00:01:21.900 --> 00:01:24.479
The presence or absence of a hole in the card determined

00:01:24.479 --> 00:01:26.549
if a specific threat was held high or low in the loom.

00:01:26.740 --> 00:01:30.330
Such that the cross thread called the weft passed above or below the thread.

00:01:30.480 --> 00:01:34.040
To vary the pattern across rows these punch cards were arranged in long chains,

00:01:34.080 --> 00:01:36.260
forming a sequence of commands for the loom.

00:01:36.260 --> 00:01:37.060
Sound familiar?

00:01:37.160 --> 00:01:40.400
Many consider Jacquard's loom to be one of the earliest forms of programming.

00:01:40.400 --> 00:01:43.080
Punched cards, turned out to be a cheap , reliable,

00:01:43.270 --> 00:01:45.270
fairly human readable way to store data.

00:01:45.429 --> 00:01:46.579
Nearly a century later,

00:01:46.579 --> 00:01:49.480
punch cards were use to help tabulate the 1890 newest census

00:01:49.480 --> 00:01:51.029
which we talked about in episode 1.

00:01:51.120 --> 00:01:54.260
Each card held an individual person's data.

00:01:54.260 --> 00:01:54.920
Things like race,

00:01:54.920 --> 00:01:55.700
marital status,

00:01:55.740 --> 00:01:56.500
number of children,

00:01:56.500 --> 00:01:57.620
country of birth, and so on.

00:01:57.680 --> 00:01:59.920
For each demographic question,

00:01:59.920 --> 00:02:02.340
a census worker would punch out a hole of the appropriate position.

00:02:02.340 --> 00:02:04.760
When a card was fed into the tabulating machine,

00:02:04.900 --> 00:02:09.020
a hole would cause the running total for that specific answer to be increased by one.

00:02:09.020 --> 00:02:10.140
In this way you could feed the

00:02:10.140 --> 00:02:12.120
entire county's worth of people

00:02:12.120 --> 00:02:15.260
and at the end you'd have running totals for all of the questions that you asked.

00:02:15.260 --> 00:02:18.060
It is important to note here that early tabulating machines

00:02:18.140 --> 00:02:22.040
were not truly computers as they can only do one thing-tabulate.

00:02:22.060 --> 00:02:24.360
Their operation was fixed and not programmable.

00:02:24.360 --> 00:02:26.780
Punished cards stored data, but not a program.

00:02:26.780 --> 00:02:30.640
Over the next 60 years, these business machines grew in capability,

00:02:30.640 --> 00:02:33.140
adding features to subtract, multiply, divide,

00:02:33.140 --> 00:02:36.580
and even make simple decisions about when to perform certain operations.

00:02:36.700 --> 00:02:38.500
To trigger these functions appropriately,

00:02:38.500 --> 00:02:40.300
so that different calculations could be performed,

00:02:40.300 --> 00:02:42.840
a programmer accessed a control panel.

00:02:42.840 --> 00:02:45.300
This panel was full of little sockets, into which a programmer would plug cables

00:02:45.300 --> 00:02:50.300
to pass values and signals between different parts of the machine.

00:02:50.300 --> 00:02:52.900
For this reason they were also called plug boards.

00:02:52.900 --> 00:02:57.400
Unfortunately, this meant having to rewire the machine each time a different program needed to be run.

00:02:57.400 --> 00:03:01.300
And so by the 1920s, these plug boards were made swappable.

00:03:01.300 --> 00:03:04.000
This not only made programming a lot more comfortable,

00:03:04.000 --> 00:03:07.400
but also allowed for different programs to be plugged into a machine.

00:03:07.400 --> 00:03:12.000
For example, one board might be wired to calculate sales tax, while another helps with payroll.

00:03:12.000 --> 00:03:15.000
But plug boards were fiendishly complicated to program.

00:03:15.000 --> 00:03:18.800
This tangle of wires is a program for calculating a profit loss summary,

00:03:18.800 --> 00:03:23.000
using an IBM 402 accounting machine, which were popular in the 1940s.

00:03:23.000 --> 00:03:26.569
And this style of plug board programming wasn't unique to electromechanical computers.

00:03:26.569 --> 00:03:30.500
The world's first General-Purpose electronic computer,

00:03:30.500 --> 00:03:33.900
the Eniac, completed in 1946, used a ton of them.

00:03:33.900 --> 00:03:36.600
Even after a program had been completely figured out on paper,

00:03:36.600 --> 00:03:41.970
physically wiring up the Eniac and getting the program to run could take upwards of three weeks.

00:03:42.130 --> 00:03:47.200
Given the enormous cost of these early computers, weeks of downtime simply to switch programs

00:03:47.200 --> 00:03:51.900
was unacceptable and the new, faster, more flexible way to programme machines was badly needed.

00:03:51.900 --> 00:03:57.100
Fortunately by the late 1940s and into the 50s, electronic memory was becoming feasible.

00:03:57.100 --> 00:03:58.530
As costs fell, memory size grew.

00:03:58.750 --> 00:04:04.859
Instead of storing a program as a physical plug board of wires, it became possible to store a program entirely in a computer's memory.

00:04:05.109 --> 00:04:09.500
Where it could be easily changed by programmers and quickly accessed by the CPU.

00:04:09.500 --> 00:04:11.900
These computers were called stored-program computers.

00:04:11.900 --> 00:04:15.959
With enough computer memory, you could store not only the program you wanted to run,

00:04:15.959 --> 00:04:17.900
but also any data your program would need.

00:04:17.900 --> 00:04:20.300
Including new values it created along the way,

00:04:20.300 --> 00:04:25.700
Unifying the progrmming data into a single shared memory is called the von Neumann architecture.

00:04:25.700 --> 00:04:29.100
Named after John von Neumann, a prominent mathematician and physicist,

00:04:29.100 --> 00:04:33.100
who worked on the Manhattan project and several early electronic computers.

00:04:33.100 --> 00:04:38.300
And once said, "I'm thinking about something much more important than bombs, I'm thinking about computers".

00:04:38.300 --> 00:04:43.500
The hallmarks of a von Neumann computer are a processing unit containing an arithmetic logic unit,

00:04:43.599 --> 00:04:47.759
data registers, an instruction register, and an instruction address register.

00:04:47.760 --> 00:04:51.400
And finally, a memory to store both data and instructions.

00:04:51.400 --> 00:04:55.400
Hopefully, this sounds familiar, because we actually built a von Neumann computer in episode 7.

00:04:55.400 --> 00:04:59.500
The very first von Neumann architecture stored program computer

00:04:59.500 --> 00:05:04.000
was constructed in 1948 by the University of Manchester, nicknamed "Baby".

00:05:04.000 --> 00:05:08.500
And even the computer you are watching this video right now uses the same architecture.

00:05:08.500 --> 00:05:10.480
Now electronic computer memory is great and all,

00:05:10.480 --> 00:05:13.900
but you still have to load the programming data in to the computer before it can run.

00:05:14.000 --> 00:05:16.200
And for this reason, punch cards were used.

00:05:16.200 --> 00:05:17.700
Let's get to the Thought Bubble.

00:05:17.700 --> 00:05:20.700
Well into the 1980s, almost all computers had a punch card reader.

00:05:20.700 --> 00:05:26.300
Which could suck in a single punch card at a time and write the contents of the card into the computer's memory.

00:05:26.300 --> 00:05:31.219
If you loaded in a stack of punch cards, the reader would load them all into memory sequentially, as a big block.

00:05:31.320 --> 00:05:35.000
Once the programming data were in memory, the computer would be told to execute it.

00:05:35.000 --> 00:05:38.160
Of course, even simple computer programs might have hundreds of

00:05:38.160 --> 00:05:41.630
instructions, which meant that programs were stored as stacks of punch cards.

00:05:41.630 --> 00:05:45.400
So if you ever have the misfortune of accidentally dropping your program on the floor,

00:05:45.400 --> 00:05:49.000
it could take you hours, days, or even weeks to put the code back in the right order.

00:05:49.000 --> 00:05:53.300
A common trick was to draw a diagonal line on the side of the card stack called striping,

00:05:53.300 --> 00:05:56.540
so you'd have at least some clue how to get it back into the right order.

00:05:57.060 --> 00:06:03.110
The largest program ever punched into punch cards was the US Air Force's sage air defense system, completed in

00:06:03.200 --> 00:06:06.590
1955. At its peak, the product is said to have employed

00:06:06.800 --> 00:06:11.800
20% of the world's programmers. Its main control program was stored on a whopping

00:06:11.800 --> 00:06:16.490
62,500 punch cards, which is equivalent to roughly 5 megabytes of data.

00:06:16.830 --> 00:06:20.100
Pretty underwhelming by today's standards.

00:06:20.100 --> 00:06:25.000
And punch cards weren't only useful for getting data into computers, but also getting data out of them.

00:06:25.000 --> 00:06:31.000
At the end of a program, results could be written out of computer memory and onto punch cards by, well, punching cards.

00:06:31.000 --> 00:06:36.499
Then this data could be analyzed by humans or loaded into a second program for additional computation.

00:06:36.750 --> 00:06:38.000
Thanks, Thought Bubble.

00:06:38.000 --> 00:06:40.350
A close cousin to punch cards was punched paper tape,

00:06:40.350 --> 00:06:44.600
which is basically the same idea, but continuously instead of being on individual cards.

00:06:44.600 --> 00:06:50.689
And of course, we haven't talked about hard drives, CD-Roms, DVDs, USB thumb drives, and other similar goodies.

00:06:50.790 --> 00:06:54.200
We'll get to those more advanced types of data storage in a future episode.

00:06:54.270 --> 00:06:57.000
Finally, in addition to plug boards and punch paper,

00:06:57.000 --> 00:07:00.330
there was another common way to program and control computers pre-1980: panel programming.

00:07:00.330 --> 00:07:07.489
Rather than having to physically plug in cables to activate certain functions, this could also be done with huge panels full of switches

00:07:07.490 --> 00:07:12.700
and buttons. And there were indicator lights to display the status of various functions and values in memory.

00:07:12.840 --> 00:07:17.400
Computers of the 50s and 60s often featured huge control consoles that look like this.

00:07:17.400 --> 00:07:21.200
Although it was rare to input a whole program using just switches, it was possible.

00:07:21.200 --> 00:07:27.500
And early home computers made for the hobbyist market used switches extensively, because most home users couldn't afford expensive

00:07:27.630 --> 00:07:34.900
peripherals like punch card readers. The first commercially successful home computer was the Altair 8800, which sold in two versions:

00:07:35.100 --> 00:07:42.260
preassembled and as a kit. The kit, which was popular with amateur computing enthusiasts, sold for the then unprecedented low price of around

00:07:42.400 --> 00:07:47.300
$400 in 1975 or about $2,000 in 2017.

00:07:47.300 --> 00:07:53.570
To program 8800 you'd literally toggle the switches on the front panel to enter the binary Op codes for the instruction you wanted.

00:07:53.640 --> 00:07:57.169
Then you press the deposit button to write that value into memory.

00:07:57.300 --> 00:08:03.900
Then in the next location in memory, you toggle the switches again for your next instruction, deposit it and so on.

00:08:03.900 --> 00:08:08.060
When you had finally entered your whole program into memory, you would toggle the switches, move back

00:08:08.060 --> 00:08:15.020
to memory address zero, press the run button, and watch the little lights blink. That was home computing in 1975, wow.

00:08:15.020 --> 00:08:17.359
Whether it was plug board switches or punched paper

00:08:17.790 --> 00:08:23.510
Programming these early computers was the realm of experts. Either professionals who did this for a living, or technology enthusiasts.

00:08:23.820 --> 00:08:26.599
You needed intimate knowledge of the underlying hardware,

00:08:26.940 --> 00:08:30.600
So things like processor Op codes and register wits to write programs.

00:08:30.740 --> 00:08:37.669
This meant programming was hard and tedious. And even professional engineers and scientists struggle to take full advantage of what computing could offer.

00:08:37.890 --> 00:08:43.100
What was needed was a simpler way to tell computers what to do; a simpler way to write programs.

00:08:43.110 --> 00:08:48.900
And that brings us to programming languages which we'll talk about next episode. See you next week.

00:08:49.350 --> 00:08:53.300
Crash Course Computer Science is produced in association with PBS Digital Studios.

00:08:53.810 --> 00:08:56.780
At their channel you can check out a playlist of shows like Braincraft,

00:08:56.960 --> 00:09:03.590
Coma Niddy and PBS Infinite Series. This episode was filmed at the Chad and Stacey Emigholz studio in Indianapolis, Indiana

00:09:03.600 --> 00:09:08.360
And it was made with the help of all these nice people and our wonderful graphics team is Thought Cafe.

00:09:08.460 --> 00:09:11.269
Thanks for the Random Access Memories, I''ll see you next time.
