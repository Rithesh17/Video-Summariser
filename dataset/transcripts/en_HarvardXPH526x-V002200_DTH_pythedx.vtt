WEBVTT - https://subtitletools.com

00:00:07.200 --> 00:00:13.120
In Python, a sequence is a collection of objects ordered by their position.

00:00:13.120 --> 00:00:15.920
In Python, there are three basic sequences,

00:00:15.920 --> 00:00:20.680
which are lists, tuples, and so-called &quot;range objects&quot;.

00:00:20.680 --> 00:00:23.680
But Python also has additional sequence types

00:00:23.680 --> 00:00:26.740
for representing things like strings.

00:00:26.740 --> 00:00:31.960
The crucial aspect about sequences is that any sequence data type will

00:00:31.960 --> 00:00:34.660
support the common sequence operations.

00:00:34.660 --> 00:00:37.090
But, in addition, these different types will

00:00:37.090 --> 00:00:42.820
have their own methods available for performing specific operations.

00:00:42.820 --> 00:00:45.880
Sequences are called &quot;sequences&quot; because the objects

00:00:45.880 --> 00:00:49.070
that they contain form a sequence.

00:00:49.070 --> 00:00:51.460
So let&#39;s look at this as a diagram.

00:00:51.460 --> 00:00:57.100
Imagine that this is our sequence, and we

00:00:57.100 --> 00:01:01.340
have a few different objects in our sequence here-- triangles, squares,

00:01:01.340 --> 00:01:04.870
and circles, in this example.

00:01:04.870 --> 00:01:09.400
The first, fundamental aspect to understand about sequences

00:01:09.400 --> 00:01:12.400
is that indexing starts at 0.

00:01:12.400 --> 00:01:15.880
So if we call this sequence &quot;s&quot;, we would

00:01:15.880 --> 00:01:21.310
access the first element in our sequence by typing &quot;s&quot;

00:01:21.310 --> 00:01:26.290
and, in brackets, putting its location, which is 0.

00:01:26.290 --> 00:01:32.140
This object here in the second position would be addressed and accessed

00:01:32.140 --> 00:01:36.370
as s[1], and so on.

00:01:36.370 --> 00:01:39.940
This would be s 2, 3, and 4.

00:01:39.940 --> 00:01:43.480
Another way to access objects within the sequence

00:01:43.480 --> 00:01:48.920
is not to count from left to right, but from right to left.

00:01:48.920 --> 00:01:54.550
So we can access sequences either by giving a positive index, which

00:01:54.550 --> 00:01:57.280
is counting a location from the left to right,

00:01:57.280 --> 00:02:02.560
or we can use a negative index, which is counting positions from right to left.

00:02:02.560 --> 00:02:06.820
In that case, we have to use the negative 1 for the very

00:02:06.820 --> 00:02:09.220
last object in our sequence.

00:02:09.220 --> 00:02:12.460
Correspondingly, minus 2 would correspond

00:02:12.460 --> 00:02:16.180
to the second to last object, and so on.

00:02:16.180 --> 00:02:20.020
Sequences also support an operation called &quot;slicing.&quot;

00:02:20.020 --> 00:02:22.420
So let&#39;s take a look at that now.

00:02:22.420 --> 00:02:25.800
If we, again, have our sequence &quot;s&quot;. To access

00:02:25.800 --> 00:02:29.710
a specific unit, specific object, we would just

00:02:29.710 --> 00:02:33.740
use the location-- for example, 2, in this case.

00:02:33.740 --> 00:02:37.090
However, if we wanted to extract multiple objects in the sequence,

00:02:37.090 --> 00:02:38.810
we can do the following.

00:02:38.810 --> 00:02:44.860
We can say s bracket, say, 0, 2.

00:02:44.860 --> 00:02:50.980
This first index, the first position is the start position,

00:02:50.980 --> 00:02:55.870
and the second position here is to stop position.

00:02:55.870 --> 00:03:02.150
Python slices stop before Python reaches the element at the stop location.

00:03:02.150 --> 00:03:07.420
This means that if you type &quot;s&quot;, and, in brackets, &quot;0 column 2&quot;,

00:03:07.420 --> 00:03:09.880
Python is going to return a slice to which

00:03:09.880 --> 00:03:13.990
consists of the objects in locations 0 and 1,

00:03:13.990 --> 00:03:18.450
but it will not return to you the object at location 2.
