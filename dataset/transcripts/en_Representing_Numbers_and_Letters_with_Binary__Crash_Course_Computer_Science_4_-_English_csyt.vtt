WEBVTT - https://subtitletools.com

00:00:03.040 --> 00:00:06.100
Hi I’m Carrie Anne, this is Crash Course
Computer Science

00:00:06.100 --> 00:00:10.540
and today we’re going to talk about how computers store and represent numerical data.

00:00:10.540 --> 00:00:12.240
Which means we’ve got to talk about Math!

00:00:12.250 --> 00:00:13.260
But don’t worry.

00:00:13.260 --> 00:00:16.680
Every single one of you already knows exactly
what you need to know to follow along.

00:00:16.680 --> 00:00:20.860
So, last episode we talked about how transistors can be used to build logic gates, which can

00:00:20.860 --> 00:00:22.700
evaluate boolean statements.

00:00:22.700 --> 00:00:26.020
And in boolean algebra, there are only two,
binary values: true and false.

00:00:26.020 --> 00:00:29.790
But if we only have two values, how in the
world do we represent information beyond just

00:00:29.790 --> 00:00:30.880
these two values?

00:00:30.880 --> 00:00:32.780
That’s where the Math comes in.

00:00:32.780 --> 00:00:41.680
INTRO

00:00:41.680 --> 00:00:46.720
So, as we mentioned last episode, a single
binary value can be used to represent a number.

00:00:46.720 --> 00:00:52.140
Instead of true and false, we can call these
two states 1 and 0 which is actually incredibly useful.

00:00:52.140 --> 00:00:55.980
And if we want to represent larger things we just need to add more binary digits.

00:00:55.980 --> 00:00:59.190
This works exactly the same way as the decimal
numbers that we’re all familiar with.

00:00:59.190 --> 00:01:04.440
With decimal numbers there are "only" 10 possible values a single digit can be; 0 through 9,

00:01:04.440 --> 00:01:07.610
and to get numbers larger than 9 we just start adding more digits to the front.

00:01:07.610 --> 00:01:09.120
We can do the same with binary.

00:01:09.120 --> 00:01:12.700
For example, let’s take the number two hundred and sixty three.

00:01:12.710 --> 00:01:14.880
What does this number actually represent?

00:01:14.880 --> 00:01:18.920
Well, it means we’ve got 2 one-hundreds, 6 tens, and 3 ones.

00:01:18.920 --> 00:01:21.510
If you add those all together, we’ve got 263.

00:01:21.510 --> 00:01:24.380
Notice how each column has a different multiplier.

00:01:24.380 --> 00:01:27.520
In this case, it’s 100, 10, and 1.

00:01:27.520 --> 00:01:30.340
Each multiplier is ten times larger than the
one to the right.

00:01:30.340 --> 00:01:35.340
That's because each column has ten possible digits to work with, 0 through 9, after which

00:01:35.340 --> 00:01:37.340
you have to carry one to the next column.

00:01:37.340 --> 00:01:42.380
For this reason, it’s called base-ten notation, also called decimal since deci means ten.

00:01:42.380 --> 00:01:45.900
AND Binary works exactly the same way, it’s just base-two.

00:01:45.900 --> 00:01:49.460
That’s because there are only two possible
digits in binary – 1 and 0.

00:01:49.460 --> 00:01:53.900
This means that each multiplier has to be two times larger than the column to its right.

00:01:53.900 --> 00:01:57.640
Instead of hundreds, tens, and ones, we now have fours, twos and ones.

00:01:57.640 --> 00:02:00.460
Take for example the binary number: 101.

00:02:00.460 --> 00:02:04.020
This means we have 1 four, 0 twos, and 1 one.

00:02:04.020 --> 00:02:07.119
Add those all together and we’ve got the
number 5 in base ten.

00:02:07.119 --> 00:02:10.700
But to represent larger numbers, binary needs a lot more digits.

00:02:10.700 --> 00:02:12.209
Take this number in binary 10110111.

00:02:12.209 --> 00:02:14.480
We can convert it to decimal in the same way.

00:02:14.480 --> 00:02:24.220
We have 1 x 128, 0 x 64, 1 x 32, 1 x 16, 0
x 8, 1 x 4, 1 x 2, and 1 x 1.

00:02:24.220 --> 00:02:26.660
Which all adds up to 183.

00:02:26.660 --> 00:02:29.060
Math with binary numbers isn’t hard either.

00:02:29.060 --> 00:02:32.600
Take for example decimal addition of 183 plus 19.

00:02:32.600 --> 00:02:37.820
First we add 3 + 9, that’s 12, so we put
2 as the sum and carry 1 to the ten’s column.

00:02:37.820 --> 00:02:43.080
Now we add 8 plus 1 plus the 1 we carried,
thats 10, so the sum is 0 carry 1.

00:02:43.080 --> 00:02:46.120
Finally we add 1 plus the 1 we carried, which equals 2.

00:02:46.120 --> 00:02:48.300
So the total sum is 202.

00:02:48.300 --> 00:02:50.560
Here’s the same sum but in binary.

00:02:50.580 --> 00:02:52.960
Just as before, we start with the ones column.

00:02:52.960 --> 00:02:55.820
Adding 1+1 results in 2, even in binary.

00:02:55.820 --> 00:03:00.880
But, there is no symbol "2" so we use 10 and
put 0 as our sum and carry the 1.

00:03:00.889 --> 00:03:02.269
Just like in our decimal example.

00:03:02.269 --> 00:03:08.020
1 plus 1, plus the 1 carried, equals 3 or
11 in binary, so we put the sum as 1 and we

00:03:08.020 --> 00:03:09.540
carry 1 again, and so on.

00:03:09.540 --> 00:03:14.150
We end up with 11001010, which is the same as the number 202 in base ten.

00:03:14.150 --> 00:03:17.400
Each of these binary digits, 1 or 0, is called a “bit”.

00:03:17.400 --> 00:03:21.819
So in these last few examples, we were using 8-bit numbers with their lowest value of zero

00:03:21.820 --> 00:03:26.980
and highest value is 255, which requires all 8 bits to be set to 1.

00:03:26.980 --> 00:03:30.900
Thats 256 different values, or 2 to the 8th power.

00:03:30.900 --> 00:03:34.300
You might have heard of 8-bit computers, or 8-bit graphics or audio.

00:03:34.300 --> 00:03:38.040
These were computers that did most of their operations in chunks of 8 bits.

00:03:38.040 --> 00:03:42.939
But 256 different values isn’t a lot to
work with, so it meant things like 8-bit games

00:03:42.940 --> 00:03:46.800
were limited to 256 different colors for their graphics.

00:03:46.800 --> 00:03:51.780
And 8-bits is such a common size in computing, it has a special word: a byte.

00:03:51.780 --> 00:03:53.139
A byte is 8 bits.

00:03:53.139 --> 00:03:55.930
If you’ve got 10 bytes, it means you’ve really got 80 bits.

00:03:55.930 --> 00:03:58.960
You’ve heard of kilobytes, megabytes, gigabytes and so on.

00:03:58.960 --> 00:04:01.820
These prefixes denote different scales of
data.

00:04:01.820 --> 00:04:06.580
Just like one kilogram is a thousand grams, 1 kilobyte is a thousand bytes…. or really

00:04:06.580 --> 00:04:07.939
8000 bits.

00:04:07.940 --> 00:04:11.340
Mega is a million bytes (MB), and giga is a billion bytes (GB).

00:04:11.340 --> 00:04:15.120
Today you might even have a hard drive that has 1 terabyte (TB) of storage.

00:04:15.120 --> 00:04:17.479
That's 8 trillion ones and zeros.

00:04:17.479 --> 00:04:18.479
But hold on!

00:04:18.480 --> 00:04:19.479
That’s not always true.

00:04:19.480 --> 00:04:24.640
In binary, a kilobyte has two to the power of 10 bytes, or 1024.

00:04:24.640 --> 00:04:28.630
1000 is also right when talking about kilobytes,
but we should acknowledge it isn’t the only

00:04:28.630 --> 00:04:29.630
correct definition.

00:04:29.630 --> 00:04:34.500
You’ve probably also heard the term 32-bit
or 64-bit computers – you’re almost certainly

00:04:34.500 --> 00:04:35.910
using one right now.

00:04:35.910 --> 00:04:39.330
What this means is that they operate in chunks of 32 or 64 bits.

00:04:39.330 --> 00:04:40.820
That’s a lot of bits!

00:04:40.820 --> 00:04:45.600
The largest number you can represent with
32 bits is just under 4.3 billion.

00:04:45.600 --> 00:04:47.860
Which is thirty-two 1's in binary.

00:04:47.860 --> 00:04:52.250
This is why our Instagram photos are so smooth and pretty – they are composed of millions

00:04:52.250 --> 00:04:56.020
of colors, because computers today use 32-bit color graphics

00:04:56.030 --> 00:05:00.260
Of course, not everything is a positive number - like my bank account in college.

00:05:00.260 --> 00:05:03.320
So we need a way to represent positive and negative numbers.

00:05:03.320 --> 00:05:08.280
Most computers use the first bit for the sign: 1 for negative, 0 for positive numbers, and

00:05:08.280 --> 00:05:11.280
then use the remaining 31 bits for the number itself.

00:05:11.280 --> 00:05:14.420
That gives us a range of roughly plus or minus
two billion.

00:05:14.420 --> 00:05:17.960
While this is a pretty big range of numbers,
it’s not enough for many tasks.

00:05:17.960 --> 00:05:23.360
There are 7 billion people on the earth, and the US national debt is almost 20 trillion dollars after all.

00:05:23.360 --> 00:05:25.800
This is why 64-bit numbers are useful.

00:05:25.800 --> 00:05:30.480
The largest value a 64-bit number can represent is around 9.2 quintillion!

00:05:30.480 --> 00:05:34.540
That’s a lot of possible numbers and will hopefully stay above the US national debt for a while!

00:05:34.540 --> 00:05:38.840
Most importantly, as we’ll discuss in a
later episode, computers must label locations

00:05:38.840 --> 00:05:43.100
in their memory, known as addresses, in order to store and retrieve values.

00:05:43.110 --> 00:05:47.020
As computer memory has grown to gigabytes and terabytes – that’s trillions of bytes

00:05:47.020 --> 00:05:50.410
– it was necessary to have 64-bit memory addresses as well.

00:05:50.410 --> 00:05:53.901
In addition to negative and positive numbers, computers must deal with numbers that are

00:05:53.901 --> 00:06:00.450
not whole numbers, like 12.7 and 3.14, or
maybe even stardate: 43989.1.

00:06:00.450 --> 00:06:04.140
These are called “floating point” numbers, because the decimal point can float around

00:06:04.140 --> 00:06:05.380
in the middle of number.

00:06:05.380 --> 00:06:08.380
Several methods have been developed to represent floating point numbers.

00:06:08.380 --> 00:06:11.780
The most common of which is the IEEE 754 standard.

00:06:11.780 --> 00:06:14.680
And you thought historians were the only people bad at naming things!

00:06:14.690 --> 00:06:19.110
In essence, this standard stores decimal values sort of like scientific notation.

00:06:19.110 --> 00:06:25.800
For example, 625.9 can be written as 0.6259 x 10^3.

00:06:25.800 --> 00:06:30.210
There are two important numbers here: the .6259 is called the significand.

00:06:30.210 --> 00:06:31.360
And 3 is the exponent.

00:06:31.360 --> 00:06:35.750
In a 32-bit floating point number, the first bit is used for the sign of the number -- positive

00:06:35.750 --> 00:06:36.750
or negative.

00:06:36.750 --> 00:06:41.080
The next 8 bits are used to store the exponent and the remaining 23 bits are used to store

00:06:41.080 --> 00:06:42.080
the significand.

00:06:42.080 --> 00:06:46.500
Ok, we’ve talked a lot about numbers, but your name is probably composed of letters,

00:06:46.500 --> 00:06:49.970
so it’s really useful for computers to also
have a way to represent text.

00:06:49.970 --> 00:06:53.300
However, rather than have a special form of storage for letters,

00:06:53.320 --> 00:06:56.120
computers simply use numbers to represent letters.

00:06:56.140 --> 00:06:59.420
The most straightforward approach might be to simply number the letters of the alphabet:

00:06:59.420 --> 00:07:02.560
A being 1, B being 2, C 3, and so on.

00:07:02.560 --> 00:07:07.070
In fact, Francis Bacon, the famous English writer, used five-bit sequences to encode

00:07:07.070 --> 00:07:11.880
all 26 letters of the English alphabet to
send secret messages back in the 1600s.

00:07:11.880 --> 00:07:16.670
And five bits can store 32 possible values
– so that’s enough for the 26 letters,

00:07:16.670 --> 00:07:20.060
but not enough for punctuation, digits, and
upper and lower case letters.

00:07:20.060 --> 00:07:23.860
Enter ASCII, the American Standard Code for Information Interchange.

00:07:24.020 --> 00:07:29.700
Invented in 1963, ASCII was a 7-bit code,
enough to store 128 different values.

00:07:29.710 --> 00:07:33.550
With this expanded range, it could encode capital letters, lowercase letters, digits

00:07:33.550 --> 00:07:37.080
0 through 9, and symbols like the @ sign and punctuation marks.

00:07:37.080 --> 00:07:42.220
For example, a lowercase ‘a’ is represented by the number 97, while a capital ‘A’ is 65.

00:07:42.340 --> 00:07:45.580
A colon is 58 and a closed parenthesis is 41.

00:07:45.590 --> 00:07:49.980
ASCII even had a selection of special command codes, such as a newline character to tell

00:07:49.980 --> 00:07:52.460
the computer where to wrap a line to the next row.

00:07:52.500 --> 00:07:56.460
In older computer systems, the line of text would literally continue off the edge of the

00:07:56.460 --> 00:07:59.110
screen if you didn’t include a new line
character!

00:07:59.110 --> 00:08:02.920
Because ASCII was such an early standard, it became widely used, and critically, allowed

00:08:02.920 --> 00:08:06.510
different computers built by different companies
to exchange data.

00:08:06.510 --> 00:08:10.580
This ability to universally exchange information
is called “interoperability”.

00:08:10.580 --> 00:08:15.120
However, it did have a major limitation: it
was really only designed for English.

00:08:15.120 --> 00:08:19.440
Fortunately, there are 8 bits in a byte, not 7, and it soon became popular to use codes

00:08:19.440 --> 00:08:25.260
128 through 255, previously unused, for "national" characters.

00:08:25.270 --> 00:08:30.030
In the US, those extra numbers were largely used to encode additional symbols, like mathematical

00:08:30.030 --> 00:08:33.750
notation, graphical elements, and common accented characters.

00:08:33.750 --> 00:08:37.789
On the other hand, while the Latin characters were used universally, Russian computers used

00:08:37.789 --> 00:08:42.280
the extra codes to encode Cyrillic characters, and Greek computers, Greek letters, and so on.

00:08:42.300 --> 00:08:45.279
And national character codes worked pretty well for most countries.

00:08:45.279 --> 00:08:49.360
The problem was, if you opened an email written in Latvian on a Turkish computer, the result

00:08:49.360 --> 00:08:51.709
was completely incomprehensible.

00:08:51.709 --> 00:08:56.350
And things totally broke with the rise of computing in Asia, as languages like Chinese and Japanese

00:08:56.350 --> 00:08:58.040
have thousands of characters.

00:08:58.040 --> 00:09:00.819
There was no way to encode all those characters in 8-bits!

00:09:00.820 --> 00:09:06.600
In response, each country invented multi-byte encoding schemes, all of which were mutually incompatible.

00:09:06.600 --> 00:09:11.160
The Japanese were so familiar with this encoding problem that they had a special name for it:

00:09:11.160 --> 00:09:13.600
"mojibake", which means "scrambled text".

00:09:13.660 --> 00:09:17.100
And so it was born – Unicode – one format
to rule them all.

00:09:17.100 --> 00:09:21.420
Devised in 1992 to finally do away with all of the different international schemes

00:09:21.420 --> 00:09:23.980
it replaced them with one universal encoding
scheme.

00:09:23.980 --> 00:09:28.760
The most common version of Unicode uses 16 bits with space for over a million codes -

00:09:28.840 --> 00:09:32.180
enough for every single character from every language ever used –

00:09:32.180 --> 00:09:36.260
more than 120,000 of them in over 100 types of script

00:09:36.260 --> 00:09:40.000
plus space for mathematical symbols and even graphical characters like Emoji.

00:09:40.000 --> 00:09:43.740
And in the same way that ASCII defines a scheme for encoding letters as binary numbers,

00:09:43.740 --> 00:09:46.339
other file formats – like MP3s or GIFs – use

00:09:46.340 --> 00:09:50.880
binary numbers to encode sounds or colors of a pixel in our photos, movies, and music.

00:09:50.880 --> 00:09:55.460
Most importantly, under the hood it all comes down to long sequences of bits.

00:09:55.460 --> 00:10:00.020
Text messages, this YouTube video, every webpage on the internet, and even your computer’s

00:10:00.020 --> 00:10:03.720
operating system, are nothing but long sequences of 1s and 0s.

00:10:03.730 --> 00:10:07.320
So next week, we’ll start talking about how your computer starts manipulating those

00:10:07.329 --> 00:10:10.829
binary sequences, for our first true taste of computation.

00:10:10.829 --> 00:10:13.780
Thanks for watching. See you next week.
