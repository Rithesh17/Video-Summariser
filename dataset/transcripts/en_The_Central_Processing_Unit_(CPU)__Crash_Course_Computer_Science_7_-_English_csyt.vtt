WEBVTT - https://subtitletools.com

00:00:03.160 --> 00:00:07.540
Hi, I’m Carrie Anne, this is Crash Course Computer Science, and today, we’re talking about processors.

00:00:07.540 --> 00:00:11.480
Just a warning though - this
is probably the most complicated episode in the series.

00:00:11.540 --> 00:00:12.940
So once you get this, you’re golden.

00:00:12.940 --> 00:00:16.940
We’ve already made a Arithmetic and Logic
Unit, which takes in binary numbers and performs

00:00:16.949 --> 00:00:21.350
calculations, and we’ve made two types of
computer memory: Registers -- small, linear

00:00:21.350 --> 00:00:25.999
chunks of memory, useful for storing a single value -- and then we scaled up, and made some

00:00:25.999 --> 00:00:30.260
RAM, a larger bank of memory that can store a lot of numbers located at different addresses.

00:00:30.260 --> 00:00:34.180
Now it’s time to put it all together and
build ourselves the heart of any computer,

00:00:34.180 --> 00:00:37.010
but without any of the emotional baggage that comes with human hearts.

00:00:37.010 --> 00:00:41.940
For computers, this is the Central Processing Unit, most commonly called the CPU.

00:00:42.060 --> 00:00:51.160
INTRO

00:00:51.160 --> 00:00:53.660
A CPU’s job is to execute programs.

00:00:53.660 --> 00:00:57.800
Programs, like Microsoft Office, Safari, or your beloved copy of Half Life: 2, are made

00:00:57.800 --> 00:01:02.570
up of a series of individual operations, called instructions, because they “instruct”

00:01:02.570 --> 00:01:03.570
the computer what to do.

00:01:03.570 --> 00:01:07.619
If these are mathematical instructions, like
add or subtract, the CPU will configure its

00:01:07.619 --> 00:01:10.039
ALU to do the mathematical operation.

00:01:10.040 --> 00:01:14.120
Or it might be a memory instruction, in which case the CPU will talk with memory

00:01:14.120 --> 00:01:15.500
to read and write values.

00:01:15.500 --> 00:01:19.280
There are a lot of parts in a CPU, so we’re going to lay it out piece by piece, building

00:01:19.280 --> 00:01:20.280
up as we go.

00:01:20.280 --> 00:01:23.950
We’ll focus on functional blocks, rather
than showing every single wire.

00:01:23.950 --> 00:01:28.040
When we do connect two components with a line, this is an abstraction for all of the necessary wires.

00:01:28.140 --> 00:01:30.780
This high level view is called the microarchitecture.

00:01:30.780 --> 00:01:32.700
OK, first, we’re going to need some memory.

00:01:32.700 --> 00:01:35.780
Lets drop in the RAM module we created last episode.

00:01:35.780 --> 00:01:40.600
To keep things simple, we’ll assume it only has 16 memory locations, each containing 8 bits.

00:01:40.740 --> 00:01:45.320
Let’s also give our processor four, 8-bit
memory registers, labeled A, B, C and D which

00:01:45.320 --> 00:01:48.060
will be used to temporarily store and manipulate values.

00:01:48.060 --> 00:01:51.160
We already know that data can be stored in memory as binary values

00:01:51.160 --> 00:01:52.920
and programs can be stored in memory too.

00:01:52.920 --> 00:01:56.560
We can assign an ID to each instruction supported by our CPU.

00:01:56.569 --> 00:02:00.799
In our hypothetical example, we use the first
four bits to store the “operation code”,

00:02:00.799 --> 00:02:02.740
or opcode for short.

00:02:02.740 --> 00:02:06.220
The final four bits specify where the data for that operation should come from -

00:02:06.220 --> 00:02:08.300
this could be registers or an address in memory.

00:02:08.300 --> 00:02:11.470
We also need two more registers to complete our CPU.

00:02:11.470 --> 00:02:14.660
First, we need a register to keep track of where we are in a program.

00:02:14.670 --> 00:02:19.440
For this, we use an instruction address register, which as the name suggests, stores the memory

00:02:19.440 --> 00:02:20.900
address of the current instruction.

00:02:20.900 --> 00:02:26.320
And then we need the other register to store the current instruction, which we’ll call the instruction register.

00:02:26.380 --> 00:02:30.140
When we first boot up our computer, all of
our registers start at 0.

00:02:30.140 --> 00:02:35.200
As an example, we’ve initialized our RAM with a simple computer program that we’ll to through today.

00:02:35.200 --> 00:02:38.800
The first phase of a CPU’s operation is
called the fetch phase.

00:02:38.800 --> 00:02:41.120
This is where we retrieve our first instruction.

00:02:41.130 --> 00:02:44.640
First, we wire our Instruction Address Register to our RAM module.

00:02:44.640 --> 00:02:49.210
The register’s value is 0, so the RAM returns whatever value is stored in address 0.

00:02:49.210 --> 00:02:52.960
In this case, 0010 1110.

00:02:52.960 --> 00:02:55.250
Then this value is copied into our instruction register.

00:02:55.250 --> 00:02:59.140
Now that we’ve fetched an instruction from
memory, we need to figure out what that instruction is

00:02:59.140 --> 00:03:00.760
so we can execute it.

00:03:00.780 --> 00:03:01.740
That is run it.

00:03:01.800 --> 00:03:02.640
Not kill it.

00:03:02.640 --> 00:03:04.580
This is called the decode phase.

00:03:04.620 --> 00:03:08.870
In this case the opcode, which is the first four bits, is: 0010.

00:03:08.870 --> 00:03:13.180
This opcode corresponds to the “LOAD A” instruction, which loads a value from RAM

00:03:13.190 --> 00:03:14.230
into Register A.

00:03:14.230 --> 00:03:19.860
The RAM address is the last four bits of our instruction which are 1110, or 14 in decimal.

00:03:19.860 --> 00:03:23.360
Next, instructions are decoded and interpreted by a Control Unit.

00:03:23.370 --> 00:03:26.300
Like everything else we’ve built, it too is made out of logic gates.

00:03:26.310 --> 00:03:31.100
For example, to recognize a LOAD A instruction, we need a circuit that checks if the opcode

00:03:31.100 --> 00:03:35.420
matches 0010 which we can do with a handful of logic gates.

00:03:35.420 --> 00:03:38.290
Now that we know what instruction we’re dealing with, we can go ahead and perform

00:03:38.290 --> 00:03:41.320
that instruction which is the beginning of the execute phase!

00:03:41.320 --> 00:03:45.720
Using the output of our LOAD_A checking circuit, we can turn on the RAM’s read enable line

00:03:45.730 --> 00:03:47.300
and send in address 14.

00:03:47.300 --> 00:03:53.480
The RAM retrieves the value at that address, which is 00000011, or 3 in decimal.

00:03:53.480 --> 00:03:58.120
Now, because this is a LOAD_A instruction,
we want that value to only be saved into Register A

00:03:58.120 --> 00:03:59.780
and not any of the other registers.

00:03:59.780 --> 00:04:04.280
So if we connect the RAM’s data wires to our four data registers, we can use our LOAD_A

00:04:04.280 --> 00:04:07.600
check circuit to enable the write enable only for Register A.

00:04:07.600 --> 00:04:12.000
And there you have it -- we’ve successfully loaded the value at RAM address 14 into Register A.

00:04:12.000 --> 00:04:16.560
We’ve completed the instruction, so we
can turn all of our wires off, and we’’re

00:04:16.560 --> 00:04:18.780
ready to fetch the next instruction in memory.

00:04:18.780 --> 00:04:23.900
To do this, we increment the Instruction Address Register by 1 which completes the execute phase.

00:04:23.920 --> 00:04:28.620
LOAD_A is just one of several possible instructions that our CPU can execute.

00:04:28.620 --> 00:04:32.560
Different instructions are decoded by different logic circuits, which configure the CPU’s

00:04:32.560 --> 00:04:34.240
components to perform that action.

00:04:34.240 --> 00:04:38.940
Looking at all those individual decode circuits is too much detail, so since we looked at one example,

00:04:38.940 --> 00:04:43.280
we’re going to go head and package them all up as a single Control Unit to keep things simple.

00:04:43.380 --> 00:04:51.460
That’s right a new level of abstraction.

00:04:51.470 --> 00:04:55.690
The Control Unit is comparable to the conductor of an orchestra, directing all of the different

00:04:55.690 --> 00:04:57.060
parts of the CPU.

00:04:57.060 --> 00:05:02.030
Having completed one full fetch/decode/execute cycle, we’re ready to start all over again,

00:05:02.030 --> 00:05:03.780
beginning with the fetch phase.

00:05:03.780 --> 00:05:07.910
The Instruction Address Register now has the value 1 in it, so the RAM gives us the value

00:05:07.910 --> 00:05:12.280
stored at address 1, which is 0001 1111.

00:05:12.280 --> 00:05:13.960
On to the decode phase!

00:05:13.960 --> 00:05:20.081
0001 is the “LOAD B” instruction, which
moves a value from RAM into Register B.

00:05:20.081 --> 00:05:24.520
The memory location this time is 1111, which is 15 in decimal.

00:05:24.520 --> 00:05:26.100
Now to the execute phase!

00:05:26.100 --> 00:05:31.840
The Control Unit configures the RAM to read address 15 and configures Register B to receive the data.

00:05:31.880 --> 00:05:38.790
Bingo, we just saved the value 00001110, or the number 14 in decimal, into Register B.

00:05:38.790 --> 00:05:43.780
Last thing to do is increment our instruction address register by 1, and we’re done with another cycle.

00:05:43.800 --> 00:05:45.680
Our next instruction is a bit different.

00:05:45.690 --> 00:05:46.700
Let’s fetch it.

00:05:46.700 --> 00:05:49.380
1000 01 00.

00:05:49.380 --> 00:05:53.100
That opcode 1000 is an ADD instruction.

00:05:53.100 --> 00:05:57.340
Instead of an 4-bit RAM address, this instruction uses two sets of 2 bits.

00:05:57.340 --> 00:06:02.720
Remember that 2 bits can encode 4 values, so 2 bits is enough to select any one of our 4 registers.

00:06:02.760 --> 00:06:09.120
The first set of 2 bits is 01, which in this case corresponds to Register B, and 00, which is Register A.

00:06:09.120 --> 00:06:17.600
So “1000 01 00” is the instruction for adding the value in Register B into the value in register A.

00:06:17.600 --> 00:06:23.200
So to execute this instruction, we need to integrate the ALU we made in Episode 5 into our CPU.

00:06:23.220 --> 00:06:27.400
The Control Unit is responsible for selecting the right registers to pass in as inputs,

00:06:27.400 --> 00:06:30.160
and configuring the ALU to perform the right operation.

00:06:30.160 --> 00:06:34.780
For this ADD instruction, the Control Unit
enables Register B and feeds its value into

00:06:34.780 --> 00:06:36.590
the first input of the ALU.

00:06:36.590 --> 00:06:40.760
It also enables Register A and feeds it into the second ALU input.

00:06:40.760 --> 00:06:45.180
As we already discussed, the ALU itself can
perform several different operations, so the

00:06:45.180 --> 00:06:50.419
Control Unit must configure it to perform
an ADD operation by passing in the ADD opcode.

00:06:50.420 --> 00:06:54.520
Finally, the output should be saved into Register A. But it can’t be written directly

00:06:54.520 --> 00:06:58.720
because the new value would ripple back into the ALU and then keep adding to itself.

00:06:58.800 --> 00:07:03.880
So the Control Unit uses an internal register
to temporarily save the output, turn off the

00:07:03.880 --> 00:07:07.750
ALU, and then write the value into the proper destination register.

00:07:07.750 --> 00:07:16.090
In this case, our inputs were 3 and 14, and
so the sum is 17, or 00010001 in binary,

00:07:16.090 --> 00:07:20.580
which is now sitting in Register A. As before, the last thing to do is increment our instruction

00:07:20.580 --> 00:07:23.320
address by 1, and another cycle is complete.

00:07:23.380 --> 00:07:29.140
Okay, so let’s fetch one last instruction: 01001101.

00:07:29.160 --> 00:07:35.040
When we decode it we see that 0100 is a STORE_A instruction, with a RAM address of 13.

00:07:35.040 --> 00:07:40.680
As usual, we pass the address to the RAM module, but instead of read-enabling the memory, we write-enable it.

00:07:40.740 --> 00:07:45.540
At the same time, we read-enable Register A. This allows us to use the data line to

00:07:45.540 --> 00:07:47.710
pass in the value stored in register A.

00:07:47.710 --> 00:07:50.900
Congrats, we just ran our first computer program!

00:07:50.900 --> 00:07:55.640
It loaded two values from memory, added them together, and then saved that sum back into memory.

00:07:55.640 --> 00:08:00.380
Of course, by me talking you through the individual steps, I was manually transitioning the CPU

00:08:00.380 --> 00:08:03.540
through its fetch, decode and execute phases.

00:08:03.540 --> 00:08:06.360
But there isn’t a mini Carrie Anne inside of every computer.

00:08:06.360 --> 00:08:10.610
So the responsibility of keeping the CPU ticking along falls to a component called the clock.

00:08:10.610 --> 00:08:15.420
As it’s name suggests, the clock triggers an electrical signal at a precise and regular interval.

00:08:15.420 --> 00:08:19.660
Its signal is used by the Control Unit to advance the internal operation of the CPU,

00:08:19.670 --> 00:08:23.400
keeping everything in lock-step - like the dude on a Roman galley drumming rhythmically

00:08:23.419 --> 00:08:27.449
at the front, keeping all the rowers synchronized... or a metronome.

00:08:27.449 --> 00:08:31.100
Of course you can’t go too fast, because even electricity takes some time to travel

00:08:31.100 --> 00:08:33.320
down wires and for the signal to settle.

00:08:33.320 --> 00:08:39.700
The speed at which a CPU can carry out each step of the fetch-decode-execute cycle is called its Clock Speed.

00:08:39.740 --> 00:08:42.800
This speed is measured in Hertz - a unit of frequency.

00:08:42.800 --> 00:08:45.160
One Hertz means one cycle per second.

00:08:45.160 --> 00:08:49.180
Given that it took me about 6 minutes to talk you through 4 instructions -- LOAD, LOAD,

00:08:49.180 --> 00:08:53.900
ADD and STORE -- that means I have an effective clock speed of roughly .03 Hertz.

00:08:53.900 --> 00:08:57.700
Admittedly, I’m not a great computer but even someone handy with math

00:08:57.700 --> 00:09:01.640
might only be able to do one calculation in their head every second or 1 Hertz.

00:09:01.760 --> 00:09:08.640
The very first, single-chip CPU was the Intel
4004, a 4-bit CPU released in 1971.

00:09:08.640 --> 00:09:12.800
It’s microarchitecture is actually pretty similar to our example CPU.

00:09:12.800 --> 00:09:18.600
Despite being the first processor of its kind,
it had a mind-blowing clock speed of 740 Kilohertz

00:09:18.600 --> 00:09:22.430
-- that’s 740 thousand cycles per second.

00:09:22.430 --> 00:09:26.400
You might think that’s fast, but it’s nothing compared to the processors that we use today.

00:09:26.480 --> 00:09:30.860
One megahertz is one million clock cycles per second, and the computer or even phone

00:09:30.870 --> 00:09:34.680
that you are watching this video on right now is no doubt a few gigahertz -- that's

00:09:34.680 --> 00:09:38.460
BILLIONs of CPU cycles every… single... second.

00:09:38.520 --> 00:09:41.700
Also, you may have heard of people overclocking their computers.

00:09:41.700 --> 00:09:45.800
This is when you modify the clock to speed up the tempo of the CPU -- like when the drummer

00:09:45.800 --> 00:09:48.640
speeds up when the Roman Galley needs to ram another ship.

00:09:48.640 --> 00:09:52.940
Chip makers often design CPUs with enough tolerance to handle a little bit of overclocking,

00:09:52.940 --> 00:09:58.080
but too much can either overheat the CPU, or produce gobbledygook as the signals fall behind the clock.

00:09:58.100 --> 00:10:02.000
And although you don’t hear very much about underclocking, it’s actually super useful.

00:10:02.000 --> 00:10:04.980
Sometimes it’s not necessary to run the processor at full speed...

00:10:04.980 --> 00:10:08.940
maybe the user has stepped away, or just not running a particularly demanding program.

00:10:08.940 --> 00:10:13.190
By slowing the CPU down, you can save a lot of power, which is important for computers

00:10:13.190 --> 00:10:15.740
that run on batteries, like laptops and smartphones.

00:10:15.740 --> 00:10:19.950
To meet these needs, many modern processors can increase or decrease their clock speed

00:10:19.950 --> 00:10:23.029
based on demand, which is called dynamic frequency scaling.

00:10:23.029 --> 00:10:26.210
So, with the addition of a clock, our CPU
is complete.

00:10:26.210 --> 00:10:28.899
We can now put a box around it, and make it its own component.

00:10:28.900 --> 00:10:29.600
Yup.

00:10:29.600 --> 00:10:37.040
A new level of abstraction!

00:10:37.040 --> 00:10:42.480
RAM, as I showed you last episode, lies outside the CPU as its own component, and they communicate

00:10:42.480 --> 00:10:45.380
with each other using address, data and enable wires.

00:10:45.380 --> 00:10:50.100
Although the CPU we designed today is a simplified example, many of the basic mechanics we discussed

00:10:50.100 --> 00:10:52.480
are still found in modern processors.

00:10:52.480 --> 00:10:56.920
Next episode, we’re going to beef up our CPU, extending it with more instructions as

00:10:56.920 --> 00:10:59.180
we take our first baby steps into software.

00:10:59.200 --> 00:11:00.360
I’ll see you next week.
