WEBVTT - https://subtitletools.com

00:00:03.080 --> 00:00:06.240
Hi, I’m Carrie Anne and welcome to Crash
Course Computer Science!

00:00:06.250 --> 00:00:10.920
Today we start our journey up the ladder of
abstraction, where we leave behind the simplicity

00:00:10.920 --> 00:00:15.340
of being able to see every switch and gear,
but gain the ability to assemble increasingly

00:00:15.340 --> 00:00:16.580
complex systems.

00:00:16.580 --> 00:00:25.360
INTRO

00:00:25.640 --> 00:00:30.060
Last episode, we talked about how computers
evolved from electromechanical devices, that

00:00:30.060 --> 00:00:35.070
often had decimal representations of numbers
– like those represented by teeth on a gear

00:00:35.070 --> 00:00:39.380
– to electronic computers with transistors
that can turn the flow of electricity on or off.

00:00:39.440 --> 00:00:44.100
And fortunately, even with just two states
of electricity, we can represent important information.

00:00:44.180 --> 00:00:48.220
We call this representation Binary -- which
literally means “of two states”, in the

00:00:48.220 --> 00:00:52.250
same way a bicycle has two wheels or a biped
has two legs.

00:00:52.250 --> 00:00:55.670
You might think two states isn’t a lot to
work with, and you’d be right!

00:00:55.670 --> 00:00:59.340
But, it’s exactly what you need for representing
the values “true” and “false”.

00:00:59.340 --> 00:01:03.740
In computers, an “on” state, when electricity
is flowing, represents true.

00:01:03.740 --> 00:01:06.719
The off state, no electricity flowing, represents
false.

00:01:06.720 --> 00:01:10.549
We can also write binary as 1’s and 0’s
instead of true’s and false’s – they

00:01:10.549 --> 00:01:15.180
are just different expressions of the same
signal – but we’ll talk more about that in the next episode.

00:01:15.340 --> 00:01:19.300
Now it is actually possible to use transistors
for more than just turning electrical current

00:01:19.300 --> 00:01:22.340
on and off, and to allow for different levels
of current.

00:01:22.340 --> 00:01:27.300
Some early electronic computers were ternary, that's three states, and even quinary, using 5 states.

00:01:27.340 --> 00:01:31.320
The problem is, the more intermediate states
there are, the harder it is to keep them all

00:01:31.320 --> 00:01:35.340
seperate -- if your smartphone battery starts
running low or there’s electrical noise

00:01:35.359 --> 00:01:39.880
because someone's running a microwave nearby,
the signals can get mixed up... and this problem

00:01:39.880 --> 00:01:43.889
only gets worse with transistors changing
states millions of times per second!

00:01:43.889 --> 00:01:48.499
So, placing two signals as far apart as possible
- using just ‘on and off’ - gives us the

00:01:48.500 --> 00:01:51.000
most distinct signal to minimize these issues.

00:01:51.000 --> 00:01:55.780
Another reason computers use binary is that
an entire branch of mathematics already existed

00:01:55.780 --> 00:01:58.229
that dealt exclusively with true and false
values.

00:01:58.229 --> 00:02:01.960
And it had figured out all of the necessary
rules and operations for manipulating them.

00:02:01.960 --> 00:02:03.580
It's called Boolean Algebra!

00:02:03.600 --> 00:02:09.520
George Boole, from which Boolean Algebra later got its name, was a self-taught English mathematician in the 1800s.

00:02:09.660 --> 00:02:14.040
He was interested in representing logical
statements that went “under, over, and beyond”

00:02:14.040 --> 00:02:18.040
Aristotle’s approach to logic, which was,
unsurprisingly, grounded in philosophy.

00:02:18.040 --> 00:02:22.700
Boole’s approach allowed truth to be systematically
and formally proven, through logic equations

00:02:22.700 --> 00:02:27.560
which he introduced in his first book, “The
Mathematical Analysis of Logic” in 1847.

00:02:27.560 --> 00:02:31.760
In “regular” algebra -- the type you probably
learned in high school -- the values of variables

00:02:31.769 --> 00:02:36.530
are numbers, and operations on those numbers
are things like addition and multiplication.

00:02:36.530 --> 00:02:41.820
But in Boolean Algebra, the values of variables are true and false, and the operations are logical.

00:02:41.820 --> 00:02:47.760
There are three fundamental operations
in Boolean Algebra: a NOT, an AND, and an OR operation.

00:02:47.780 --> 00:02:51.400
And these operations turn out to be really
useful so we’re going to look at them individually.

00:02:51.400 --> 00:02:55.800
A NOT takes a single boolean value, either
true or false, and negates it.

00:02:55.860 --> 00:02:58.060
It flips true to false, and false to true.

00:02:58.060 --> 00:03:01.880
We can write out a little logic table that
shows the original value under Input, and

00:03:01.890 --> 00:03:04.790
the outcome after applying the operation under
Output.

00:03:04.790 --> 00:03:08.969
Now here’s the cool part -- we can easily
build boolean logic out of transistors.

00:03:08.969 --> 00:03:13.600
As we discussed last episode, transistors
are really just little electrically controlled switches.

00:03:13.640 --> 00:03:16.820
They have three wires: two electrodes and
one control wire.

00:03:16.820 --> 00:03:21.299
When you apply electricity to the control
wire, it lets current flow through from one

00:03:21.300 --> 00:03:24.469
electrode, through the transistor, to the
other electrode.

00:03:24.469 --> 00:03:29.600
This is a lot like a spigot on a pipe -- open
the tap, water flows, close the tap, water shuts off.

00:03:29.640 --> 00:03:34.860
You can think of the control wire as an input, and the wire coming from the bottom electrode as the output.

00:03:34.860 --> 00:03:38.340
So with a single transistor, we have one input
and one output.

00:03:38.359 --> 00:03:42.650
If we turn the input on, the output is also
on because the current can flow through it.

00:03:42.650 --> 00:03:46.999
If we turn the input off, the output is also
off and the current can no longer pass through.

00:03:46.999 --> 00:03:50.410
Or in boolean terms, when the input is true,
the output is true.

00:03:50.410 --> 00:03:53.230
And when the input is false, the output is
also false.

00:03:53.230 --> 00:03:55.329
Which again we can show on a logic table.

00:03:55.329 --> 00:03:58.909
This isn’t a very exciting circuit though
because its not doing anything -- the input

00:03:58.909 --> 00:04:00.180
and output are the same.

00:04:00.180 --> 00:04:03.680
But, we can modify this circuit just a little
bit to create a NOT.

00:04:03.680 --> 00:04:07.560
Instead of having the output wire at the end
of the transistor, we can move it before.

00:04:07.560 --> 00:04:11.180
If we turn the input on, the transistor allows
current to pass through it to the “ground”,

00:04:11.180 --> 00:04:14.030
and the output wire won’t receive that current
- so it will be off.

00:04:14.030 --> 00:04:17.930
In our water metaphor grounding would be like
if all the water in your house was flowing

00:04:17.930 --> 00:04:21.280
out of a huge hose so there wasn’t any water
pressure left for your shower.

00:04:21.280 --> 00:04:24.320
So in this case if the input is on, output
is off.

00:04:24.320 --> 00:04:28.300
When we turn off the transistor, though, current
is prevented from flowing down it to the

00:04:28.300 --> 00:04:31.500
ground, so instead, current flows through
the output wire.

00:04:31.500 --> 00:04:34.200
So the input will be off and the output will
be on.

00:04:34.200 --> 00:04:38.820
And this matches our logic table for NOT,
so congrats, we just built a circuit that computes NOT!

00:04:38.860 --> 00:04:43.640
We call them NOT gates - we call them gates because they’re controlling the path of our current.

00:04:43.640 --> 00:04:48.220
The AND Boolean operation takes two inputs,
but still has a single output.

00:04:48.220 --> 00:04:51.440
In this case the output is only true if both
inputs are true.

00:04:51.449 --> 00:04:53.000
Think about it like telling the truth.

00:04:53.000 --> 00:04:56.009
You’re only being completely honest if you
don’t lie even a little.

00:04:56.009 --> 00:05:01.220
For example, let’s take the statement, “My
name is Carrie Anne AND I’m wearing a blue dress".

00:05:01.280 --> 00:05:03.640
Both of those facts are true, so the whole
statement is true.

00:05:03.640 --> 00:05:08.060
But if I said, “My name is Carrie Anne AND
I’m wearing pants” that would be false,

00:05:08.069 --> 00:05:09.699
because I’m not wearing pants.

00:05:09.699 --> 00:05:10.930
Or trousers.

00:05:10.930 --> 00:05:11.949
If you’re in England.

00:05:11.949 --> 00:05:15.919
The Carrie Anne part is true, but a true AND
a false, is still false.

00:05:15.919 --> 00:05:19.789
If I were to reverse that statement it would
still obviously be false, and if I were to

00:05:19.789 --> 00:05:24.530
tell you two complete lies that is also false,
and again we can write all of these combinations

00:05:24.530 --> 00:05:25.550
out in a table.

00:05:25.550 --> 00:05:30.580
To build an AND gate, we need two transistors
connected together so we have our two inputs

00:05:30.580 --> 00:05:31.780
and one output.

00:05:31.780 --> 00:05:36.700
If we turn on just transistor A, current
won’t flow because the current is stopped by transistor B.

00:05:36.700 --> 00:05:40.080
Alternatively, if transistor
B is on, but the transistor A is off,

00:05:40.160 --> 00:05:41.780
the same thing, the current can’t get through.

00:05:41.840 --> 00:05:46.740
Only if transistor A AND transistor B are
on does the output wire have current.

00:05:46.740 --> 00:05:51.860
The last boolean operation is OR -- where
only one input has to be true for the output to be true.

00:05:51.960 --> 00:05:55.800
For example, my name is Margaret Hamilton OR I’m wearing a blue dress.

00:05:55.800 --> 00:05:59.560
This is a true statement because although
I’m not Margaret Hamilton unfortunately,

00:05:59.560 --> 00:06:02.940
I am wearing a blue dress, so the overall
statement is true.

00:06:02.940 --> 00:06:06.300
An OR statement is also true if both facts are true.

00:06:06.320 --> 00:06:09.650
The only time an OR statement is false is
if both inputs are false.

00:06:09.650 --> 00:06:12.860
Building an OR gate from transistors needs a few extra wires.

00:06:12.860 --> 00:06:17.520
Instead of having two transistors in series
-- one after the other -- we have them in parallel.

00:06:17.560 --> 00:06:20.460
We run wires from the current source to
both transistors.

00:06:20.479 --> 00:06:24.940
We use this little arc to note that the
wires jump over one another and aren’t connected,

00:06:24.940 --> 00:06:26.280
even though they look like they cross.

00:06:26.280 --> 00:06:30.909
If both transistors are turned off, the
current is prevented from flowing to the output,

00:06:30.909 --> 00:06:32.280
so the output is also off.

00:06:32.280 --> 00:06:36.409
Now, if we turn on just Transistor A, current
can flow to the output.

00:06:36.409 --> 00:06:39.880
Same thing if transistor A is off, but Transistor B in on.

00:06:39.880 --> 00:06:43.900
Basically if A OR B is on, the output is also on.

00:06:43.900 --> 00:06:47.660
Also, if both transistors are on, the output is still on.

00:06:47.660 --> 00:06:52.129
Ok, now that we’ve got NOT, AND, and OR
gates, and we can leave behind the constituent

00:06:52.129 --> 00:06:54.280
transistors and move up a layer of abstraction.

00:06:54.280 --> 00:06:58.400
The standard engineers use for these gates are a triangle with a dot for a NOT,

00:06:58.400 --> 00:07:01.200
a D for the AND, and a spaceship for the OR.

00:07:01.200 --> 00:07:03.640
Those aren’t the official names, but that's howI like to think of them.

00:07:03.640 --> 00:07:07.520
Representing them and thinking about them
this way allows us to build even bigger components

00:07:07.530 --> 00:07:11.940
while keeping the overall complexity relatively
the same - just remember that that mess of

00:07:11.949 --> 00:07:13.910
transistors and wires is still there.

00:07:13.910 --> 00:07:20.380
For example, another useful boolean operation in computation is called an Exclusive OR - or XOR for short.

00:07:20.500 --> 00:07:26.750
XOR is like a regular OR, but with one difference:
if both inputs are true, the XOR is false.

00:07:26.750 --> 00:07:31.100
The only time an XOR is true is when one input
is true and the other input is false.

00:07:31.100 --> 00:07:35.009
It’s like when you go out to dinner and
your meal comes with a side salad OR a soup

00:07:35.009 --> 00:07:36.710
– sadly, you can’t have both!

00:07:36.710 --> 00:07:41.020
And building this from transistors is pretty
confusing, but we can show how an XOR is created

00:07:41.020 --> 00:07:43.040
from our three basic boolean gates.

00:07:43.040 --> 00:07:46.240
We know we have two inputs again -- A and B -- and one output.

00:07:46.240 --> 00:07:50.700
Let’s start with an OR gate, since the
logic table looks almost identical to an OR.

00:07:50.700 --> 00:07:55.200
There’s only one problem - when A and
B are true, the logic is different from OR,

00:07:55.210 --> 00:07:56.819
and we need to output “false”.

00:07:56.819 --> 00:07:59.000
To do this we need to add some additional gates.

00:07:59.000 --> 00:08:03.430
If we add an AND gate, and the input is
true and true, the output will be true.

00:08:03.430 --> 00:08:04.430
This isn’t what we want.

00:08:04.430 --> 00:08:07.940
But if we add a NOT immediately after this will flip it to false.

00:08:08.060 --> 00:08:13.479
Okay, now if we add a final AND gate and send
it that value along with the output of our

00:08:13.479 --> 00:08:19.050
original OR gate, the AND will take in “false”
and “true”, and since AND needs both values

00:08:19.050 --> 00:08:21.060
to be true, its output is false.

00:08:21.060 --> 00:08:22.819
That’s the first row of our logic table.

00:08:22.819 --> 00:08:26.490
If we work through the remaining input
combinations, we can see this boolean logic

00:08:26.490 --> 00:08:28.870
circuit does implement an Exclusive OR.

00:08:28.870 --> 00:08:33.090
And XOR turns out to be a very useful component, and we’ll get to it in another episode,

00:08:33.090 --> 00:08:38.240
so useful in fact engineers gave it its own
symbol too -- an OR gate with a smile :)

00:08:38.240 --> 00:08:42.330
But most importantly, we can now put XOR into our metaphorical toolbox and not have to worry

00:08:42.330 --> 00:08:46.500
about the individual logic gates that make
it up, or the transistors that make up those gates,

00:08:46.500 --> 00:08:49.200
or how electrons are flowing through
a semiconductor.

00:08:49.200 --> 00:08:51.300
Moving up another layer of abstraction.

00:08:51.310 --> 00:08:55.040
When computer engineers are designing processors,
they rarely work at the transistor level,

00:08:55.040 --> 00:08:59.100
and instead work with much larger blocks,
like logic gates, and even larger components

00:08:59.100 --> 00:09:02.340
made up of logic gates, which we’ll discuss
in future episodes.

00:09:02.340 --> 00:09:05.811
And even if you are a professional computer
programmer, it’s not often that you think

00:09:05.811 --> 00:09:09.710
about how the logic that you are programming is actually implemented in the physical world

00:09:09.710 --> 00:09:11.720
by these teeny tiny components.

00:09:11.720 --> 00:09:15.780
We’ve also moved from thinking about raw
electrical signals to our first representation

00:09:15.780 --> 00:09:20.270
of data - true and false - and we’ve even
gotten a little taste of computation.

00:09:20.270 --> 00:09:25.320
With just the logic gates in this episode,
we could build a machine that evaluates complex logic statements,

00:09:25.320 --> 00:09:29.480
like if “Name is John Green AND after 5pm OR is Weekend

00:09:29.480 --> 00:09:33.100
AND near Pizza Hut”, then “John will want pizza” equals true.

00:09:33.120 --> 00:09:36.080
And with that, I'm starving, I'll see you next week.
