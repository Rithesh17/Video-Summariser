WEBVTT - https://subtitletools.com

00:00:06.700 --> 00:00:09.960
Numbers are one type of object in Python.

00:00:09.960 --> 00:00:13.900
And Python, in fact, provides three different numeric types.

00:00:13.900 --> 00:00:19.120
These are called integers, floating point numbers, and complex numbers.

00:00:19.120 --> 00:00:21.720
One of the interesting things about Python integers

00:00:21.720 --> 00:00:24.050
is that they have unlimited precision.

00:00:24.050 --> 00:00:27.030
That means your integer will never be too

00:00:27.030 --> 00:00:30.620
long to fit into Python&#39;s integer type.

00:00:30.620 --> 00:00:33.340
Another important aspect to realize about numbers

00:00:33.340 --> 00:00:36.920
is that you can freely mix different numeric types.

00:00:36.920 --> 00:00:41.560
All Python numbers support all the usual arithmetic operations.

00:00:41.560 --> 00:00:44.910
And let&#39;s try a few of them out right now.

00:00:44.910 --> 00:00:50.960
The basics, like addition and multiplication are, of course, easy.

00:00:50.960 --> 00:00:53.860
We can also raise a number to a power.

00:00:53.860 --> 00:00:56.820
And you&#39;ll see that if we increase the exponent a little bit,

00:00:56.820 --> 00:00:59.170
the result is going to be a very large number,

00:00:59.170 --> 00:01:01.300
but that&#39;s not going to be a problem.

00:01:01.300 --> 00:01:05.850
Again, Python has unlimited precision for integers.

00:01:05.850 --> 00:01:07.640
Let&#39;s try out division.

00:01:07.640 --> 00:01:10.350
Division is accomplished using the slash.

00:01:10.350 --> 00:01:14.010
So for example, if we say 6 divided by 7,

00:01:14.010 --> 00:01:17.600
Python gives us the floating point answer.

00:01:17.600 --> 00:01:20.020
Sometimes, however, we might want to do what&#39;s called

00:01:20.020 --> 00:01:23.020
floor division, or integer division.

00:01:23.020 --> 00:01:26.680
This is accomplished by using two slash signs.

00:01:26.680 --> 00:01:33.040
In this case, let&#39;s do something like 15 divided by 7, which in a floating point

00:01:33.040 --> 00:01:34.840
is 2.14.

00:01:34.840 --> 00:01:39.680
If we use integer division, Python is going to give us an answer of 2.

00:01:39.680 --> 00:01:41.890
So what happened here is the following:

00:01:41.890 --> 00:01:45.090
Python carries out the division as usual

00:01:45.090 --> 00:01:47.820
and that gives you the number 2.14.

00:01:47.820 --> 00:01:51.560
It then rounds that number to the closest integer,

00:01:51.560 --> 00:01:55.000
which is less than the actual floating point answer.

00:01:55.000 --> 00:01:58.860
So 2.14, a floating point number, gets rounded down

00:01:58.860 --> 00:02:03.330
to the closer, smaller integer, which is 2.

00:02:03.330 --> 00:02:07.810
The interactive mode in Python provides a very useful operation

00:02:07.810 --> 00:02:10.350
which is the underscore operator.

00:02:10.350 --> 00:02:15.090
And the value of the underscore operator is always the last object

00:02:15.090 --> 00:02:17.560
that Python has returned to you.

00:02:17.560 --> 00:02:19.000
So let&#39;s see what that means.

00:02:19.000 --> 00:02:23.830
Let&#39;s do a simple division-- 15 divided by 2.3, say.

00:02:23.830 --> 00:02:27.980
Python tells us that it&#39;s 6.521 and so on.

00:02:27.980 --> 00:02:32.120
Now, if I hit underscore, Python is returning

00:02:32.120 --> 00:02:34.200
the value of the latest operation.

00:02:34.200 --> 00:02:38.080
Say I wanted to multiply this number with 2.3, which

00:02:38.080 --> 00:02:40.230
would give me back the number of 15.

00:02:40.230 --> 00:02:42.205
So I can do that in the following way.

00:02:42.205 --> 00:02:43.330
I just take the underscore,

00:02:43.330 --> 00:02:49.360
I multiply that by 2.3, and the answer is 15.

00:02:49.360 --> 00:02:52.170
This is especially handy in the interactive mode

00:02:52.170 --> 00:02:54.930
if you&#39;d like to change a few calculations.

00:02:54.930 --> 00:02:56.610
So let&#39;s try one example.

00:02:56.610 --> 00:02:59.140
Let&#39;s first start with 10 times 2.

00:02:59.140 --> 00:03:00.470
That&#39;s 20.

00:03:00.470 --> 00:03:01.910
Let&#39;s take that number,

00:03:01.910 --> 00:03:04.950
let&#39;s add 5 to it,

00:03:04.950 --> 00:03:11.720
and let&#39;s then take that number 25 raise that to the second power.

00:03:11.720 --> 00:03:15.370
In this case, the answer is 625.

00:03:15.370 --> 00:03:19.810
Very commonly we need to go beyond the built-in functions and operations

00:03:19.810 --> 00:03:21.770
that Python provides.

00:03:21.770 --> 00:03:24.570
And one way to do this for numbers is to use

00:03:24.570 --> 00:03:28.870
the math module, which contains some basic mathematical operations,

00:03:28.870 --> 00:03:30.330
like the factorial.

00:03:30.330 --> 00:03:34.430
Let&#39;s just quickly remind ourselves, what is the factorial operation.

00:03:34.430 --> 00:03:37.260
So the factorial of n,

00:03:37.260 --> 00:03:43.840
indicated by exclamation mark, is n times n minus 1

00:03:43.840 --> 00:03:47.210
all the way times 2 times 1.

00:03:47.210 --> 00:03:55.610
And so for example, 3 factorial would be equal to 3 times 2 times 1, which is 6.

00:03:55.610 --> 00:03:59.090
Now, the question is, how could we implement this simple calculation

00:03:59.090 --> 00:04:00.410
in Python?

00:04:00.410 --> 00:04:03.270
Let&#39;s start by importing the math module.

00:04:03.270 --> 00:04:06.550
So we type import math.

00:04:06.550 --> 00:04:13.540
And the function we&#39;re interested in is math.factorial.

00:04:13.540 --> 00:04:16.970
So the argument in this case would be 3, and Python

00:04:16.970 --> 00:04:22.500
tells us 3 factorial is equal to 6.
