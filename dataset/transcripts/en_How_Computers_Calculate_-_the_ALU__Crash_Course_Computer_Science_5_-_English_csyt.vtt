WEBVTT - https://subtitletools.com

00:00:03.160 --> 00:00:05.860
Hi, I’m Carrie Ann and this is Crash Course Computer Science.

00:00:05.860 --> 00:00:09.580
So last episode, we talked about how numbers can be represented in binary.
Representing

00:00:09.580 --> 00:00:13.740
Like, 00101010 is 42 in decimal.

00:00:13.740 --> 00:00:19.200
Representing  and storing numbers is an important function of a computer, but the real goal is computation,

00:00:19.200 --> 00:00:23.480
or manipulating numbers in a structured and purposeful way, like adding two numbers together.

00:00:23.480 --> 00:00:27.060
These operations are handled by a computer’s Arithmetic and Logic Unit,

00:00:27.060 --> 00:00:29.720
but most people call it by its street name: the ALU.

00:00:29.720 --> 00:00:32.660
The ALU is the mathematical brain of a computer.

00:00:32.660 --> 00:00:36.460
When you understand an ALU’s design and function, you’ll understand a fundamental

00:00:36.460 --> 00:00:41.860
part of modern computers. It is THE thing
that does all of the computation in a computer,

00:00:41.860 --> 00:00:43.860
so basically everything uses it.

00:00:43.860 --> 00:00:45.620
First though, look at this beauty.

00:00:45.620 --> 00:00:50.900
This is perhaps the most famous ALU ever, the Intel 74181.

00:00:50.900 --> 00:00:52.860
When it was released in 1970, it was

00:00:52.860 --> 00:00:57.500
It was the first complete ALU that fit entirely inside of a single chip -

00:00:57.580 --> 00:00:59.840
Which was a huge engineering feat at the time.

00:00:59.840 --> 00:01:03.340
So today we’re going to take those Boolean logic gates we learned about last week

00:01:03.340 --> 00:01:08.540
to build a simple ALU circuit with much of the same functionality as the 74181.

00:01:08.540 --> 00:01:10.500
And over the next few episodes we’ll use

00:01:10.500 --> 00:01:14.159
this to construct a computer from scratch. So it’s going to get a little bit complicated,

00:01:14.160 --> 00:01:16.020
but I think you guys can handle it.

00:01:16.060 --> 00:01:25.300
INTRO

00:01:25.300 --> 00:01:30.280
An ALU is really two units in one -- there’s
an arithmetic unit and a logic unit.

00:01:30.280 --> 00:01:34.840
Let's start with the arithmetic unit, which is responsible for handling all numerical operations in a

00:01:34.840 --> 00:01:39.560
computer, like addition and subtraction. It
also does a bunch of other simple things like

00:01:39.560 --> 00:01:43.990
add one to a number, which is called an increment operation, but we’ll talk about those later.

00:01:43.990 --> 00:01:47.960
Today, we’re going to focus on the pièce de résistance, the crème de la crème of

00:01:47.980 --> 00:01:52.440
operations that underlies almost everything else a computer does - adding two numbers together.

00:01:52.480 --> 00:01:54.220
We could build this circuit entirely out of

00:01:54.220 --> 00:01:57.580
individual transistors, but that would get
confusing really fast.

00:01:57.620 --> 00:02:03.340
So instead as we talked about in Episode 3 – we can use a high-level of abstraction and build our components

00:02:03.340 --> 00:02:08.140
out of logic gates, in this case: AND, OR,
NOT and XOR gates.

00:02:08.140 --> 00:02:12.930
The simplest adding circuit that we can build takes two binary digits, and adds them together.

00:02:12.930 --> 00:02:18.060
So we have two inputs, A and B, and one output, which is the sum of those two digits.

00:02:18.060 --> 00:02:21.720
Just to clarify: A, B and the output are all single bits.

00:02:21.860 --> 00:02:24.520
There are only four possible input combinations.

00:02:24.520 --> 00:02:27.400
The first three are:
0+0 = 0

00:02:27.400 --> 00:02:30.900
1+0 = 1
0+1 = 1

00:02:30.900 --> 00:02:35.420
Remember that in binary, 1 is the same as
true, and 0 is the same as false.

00:02:35.420 --> 00:02:39.720
So this set of inputs exactly matches the boolean logic of an XOR gate, and we can use it as

00:02:39.720 --> 00:02:40.720
our 1-bit adder.

00:02:40.720 --> 00:02:46.300
But the fourth input combination, 1 + 1,
is a special case. 1 + 1 is 2 (obviously)

00:02:46.300 --> 00:02:50.180
but there’s no 2 digit in binary, so as we talked about last episode, the result is

00:02:50.180 --> 00:02:54.930
0 and the 1 is carried to the next column. So the sum is really 10 in binary.

00:02:54.930 --> 00:03:00.280
Now, the output of our XOR gate is partially correct - 1 plus 1, outputs 0.

00:03:00.280 --> 00:03:03.040
But, we need an extra output wire for that carry bit.

00:03:03.040 --> 00:03:06.980
The carry bit is only “true” when the inputs are 1 AND 1, because that's the only

00:03:06.980 --> 00:03:10.690
time when the result (two) is bigger than
1 bit can store… and conveniently we have

00:03:10.690 --> 00:03:15.091
a gate for that! An AND gate, which is
only true when both inputs are true, so

00:03:15.100 --> 00:03:17.220
we’ll add that to our circuit too.

00:03:17.220 --> 00:03:19.980
And that's it. This circuit is called a half adder. It’s

00:03:19.980 --> 00:03:24.040
It's not that complicated - just two logic gates - but let’s abstract away even this level

00:03:24.040 --> 00:03:28.260
of detail and encapsulate our newly minted half adder as its own component, with two

00:03:28.260 --> 00:03:32.780
inputs - bits A and B - and two outputs, the sum and the carry bits.

00:03:32.780 --> 00:03:36.840
This takes us to another level of abstraction… heh… I feel like I say that a lot.

00:03:36.860 --> 00:03:38.120
I wonder if this is going to become a thing.

00:03:43.880 --> 00:03:46.480
Anyway, If you want to add more than 1 + 1

00:03:46.480 --> 00:03:50.760
we’re going to need a “Full Adder.” That half-adder left us with a carry bit as output.

00:03:50.760 --> 00:03:54.250
That means that when we move
on to the next column in a multi-column addition,

00:03:54.250 --> 00:03:59.000
and every column after that, we are going to have to add three bits together, no two.

00:03:59.000 --> 00:04:00.980
A full adder is a bit more complicated - it

00:04:00.980 --> 00:04:07.040
takes three bits as inputs: A, B and C. So
the maximum possible input is 1 + 1 + 1,

00:04:07.040 --> 00:04:12.080
which equals 1 carry out 1, so we still
only need two output wires: sum and carry.

00:04:12.080 --> 00:04:17.440
We can build a full adder using half adders. To do this, we use a half adder to add A plus B

00:04:17.440 --> 00:04:22.660
just like before – but then feed that
result and input C into a second half adder.

00:04:22.670 --> 00:04:27.070
Lastly, we need a OR gate to check if either one of the carry bits was true.

00:04:27.070 --> 00:04:31.630
That’s it, we just made a full adder! Again,we can go up a level of abstraction and wrap

00:04:31.630 --> 00:04:36.460
up this full adder as its own component. It
takes three inputs, adds them, and outputs

00:04:36.460 --> 00:04:38.040
the sum and the carry, if there is one.

00:04:38.040 --> 00:04:42.140
Armed with our new components, we can now build a circuit that takes two, 8-bit numbers

00:04:42.140 --> 00:04:44.340
– Let’s call them A and B – and adds them together.

00:04:44.340 --> 00:04:46.180
Let’s start with the very first bit of

00:04:46.180 --> 00:04:51.080
A and B, which we’ll call A0 and B0. At
this point, there is no carry bit to deal

00:04:51.080 --> 00:04:55.310
with, because this is our first addition.
So we can use our half adder to add these

00:04:55.310 --> 00:05:01.100
two bits together. The output is sum0.
Now we want to add A1 and B1 together.

00:05:01.100 --> 00:05:06.220
It's possible there was a carry from the previous addition of A0 and B0, so this time we need

00:05:06.220 --> 00:05:11.490
to use a full adder that also inputs the carry
bit. We output this result as sum1.

00:05:11.490 --> 00:05:16.460
Then, we take any carry from this full adder, and run it into the next full adder that handles

00:05:16.460 --> 00:05:21.540
A2 and B2. And we just keep doing this in
a big chain until all 8 bits have been added.

00:05:21.540 --> 00:05:26.060
Notice how the carry bits ripple forward to
each subsequent adder. For this reason,

00:05:26.060 --> 00:05:31.040
this is called an 8-bit ripple carry adder. Notice how our last full adder has a carry out.

00:05:32.680 --> 00:05:36.200
If there is a carry into the 9th bit, it means the sum of the two numbers is too large to fit into 8-bits.

00:05:36.200 --> 00:05:37.580
This is called an overflow.

00:05:37.580 --> 00:05:43.340
In general, an overflow occurs when the result of an addition is too large to be represented by the number of bits you are using.

00:05:43.340 --> 00:05:45.770
This can usually cause errors and unexpected behavior.

00:05:45.770 --> 00:05:50.200
Famously, the original PacMan arcade game used 8 bits to keep track of what level you were on.

00:05:50.200 --> 00:05:55.100
This meant that if you made it past level 255 – the largest number storablein 8 bits –

00:05:55.100 --> 00:05:58.130
to level 256, the ALU overflowed.

00:05:58.130 --> 00:06:01.540
This caused a bunch of errors and glitches making the level unbeatable.

00:06:01.540 --> 00:06:04.820
The bug became a rite of passage for the greatest PacMan players.

00:06:04.820 --> 00:06:09.560
So if we want to avoid overflows, we can extend our circuit with more full adders, allowing

00:06:09.560 --> 00:06:14.980
us to add 16 or 32 bit numbers. This makes overflows less likely to happen, but at the

00:06:14.980 --> 00:06:19.420
expense of more gates. An additional downside is that it takes a little bit of time for

00:06:19.420 --> 00:06:21.400
each of the carries to ripple forward.

00:06:21.400 --> 00:06:26.400
Admittedly, not very much time, electrons move pretty fast, so we’re talking about billionths of a second,

00:06:26.400 --> 00:06:29.120
but that’s enough to make a difference in today’s fast computers.

00:06:29.120 --> 00:06:35.060
For this reason, modern computers use a slightly different adding circuit called a ‘carry-look-ahead’ adder

00:06:35.060 --> 00:06:39.860
which is faster, but ultimately does exactly the same thing-- adds binary numbers.

00:06:39.860 --> 00:06:43.600
The ALU’s arithmetic unit also has circuits for other math operations

00:06:43.600 --> 00:06:46.520
and in general these 8 operations are always supported.

00:06:46.540 --> 00:06:50.140
And like our adder, these other operations are built from individual logic gates.

00:06:50.140 --> 00:06:54.460
Interestingly, you may have noticed that there are no multiply and divide operations.

00:06:54.460 --> 00:06:59.680
That's because simple ALUs don’t have a circuit for this, and instead just perform a series of additions.

00:06:59.680 --> 00:07:01.880
Let’s say you want to multiply 12 by 5.

00:07:01.880 --> 00:07:06.500
That’s the same thing as adding 12 to itself 5 times. So it would take 5 passes through

00:07:06.500 --> 00:07:10.960
the ALU to do this one multiplication. And
this is how many simple processors,

00:07:10.960 --> 00:07:15.600
like those in your thermostat, TV remote, and microwave, do multiplication.

00:07:15.600 --> 00:07:17.220
It’s slow, but it gets the job done.

00:07:17.220 --> 00:07:20.500
However, fancier processors, like those in your laptop or smartphone,

00:07:20.500 --> 00:07:23.600
have arithmetic units with dedicated circuits for multiplication.

00:07:23.600 --> 00:07:27.870
And as you might expect, the circuit is more complicated than addition -- there’s no

00:07:27.870 --> 00:07:31.540
magic, it just takes a lot more logic gates
– which is why less expensive processors

00:07:31.540 --> 00:07:32.680
don’t have this feature.

00:07:32.680 --> 00:07:36.720
Ok, let’s move on to the other half of the ALU: the Logic Unit.

00:07:36.720 --> 00:07:39.700
Instead of arithmetic
operations, the Logic Unit performs… well...

00:07:39.700 --> 00:07:44.060
logical operations, like AND, OR and NOT, which we’ve talked about previously.

00:07:44.070 --> 00:07:47.680
It also performs simple numerical tests, like checking if a number is negative.

00:07:47.680 --> 00:07:51.600
For example, here’s a circuit that tests
if the output of the ALU is zero.

00:07:51.660 --> 00:07:55.380
It does this using a bunch of OR gates to see if any of the bits are 1.

00:07:55.380 --> 00:08:01.460
Even if one single bit is 1, we know the number can’t be zero and then we use a final NOT gate to flip this

00:08:01.460 --> 00:08:05.110
input so the output is 1 only if the input number is 0.

00:08:05.110 --> 00:08:09.190
So that’s a high level overview of what makes up an ALU. We even built several of

00:08:09.190 --> 00:08:11.620
the main components from scratch, like our ripple adder.

00:08:11.620 --> 00:08:14.680
As you saw, it’s just a big bunch of logic gates connected in clever ways.

00:08:14.680 --> 00:08:18.740
Which brings us back to that ALU you admired so much at the beginning of the episode.

00:08:18.740 --> 00:08:21.060
The Intel 74181.

00:08:21.220 --> 00:08:26.780
Unlike the 8-bit ALU we made today, the 74181 could only handle 4-bit inputs,

00:08:26.780 --> 00:08:29.040
which means YOU BUILT AN ALU THAT’S LIKE

00:08:29.080 --> 00:08:34.700
TWICE AS GOOD AS THAT SUPER FAMOUS ONE. WITH
YOUR MIND! Well.. sort of.

00:08:34.700 --> 00:08:36.820
We didn’t build the whole thing… but you get the idea.

00:08:36.820 --> 00:08:41.840
The 74181 used about 70 logic gates, and it couldn’t multiply or divide.

00:08:41.840 --> 00:08:47.540
But it was a huge step forward in miniaturization, opening the doors to more capable and less expensive computers.

00:08:47.540 --> 00:08:50.360
This 4-bit ALU circuit is already a lot to take in,

00:08:50.360 --> 00:08:54.819
but our 8-bit ALU would require hundreds of logic gates to fully build and engineers

00:08:54.819 --> 00:08:59.129
don’t want to see all that complexity when using an ALU, so they came up with a special

00:08:59.129 --> 00:09:04.160
symbol to wrap it all up, which looks like
a big ‘V’. Just another level of abstraction!

00:09:09.440 --> 00:09:17.300
Our 8-bit ALU has two inputs, A and B, each with 8 bits. We also need a way to specify what operation the ALU should perform,

00:09:17.300 --> 00:09:19.700
for example, addition or subtraction.

00:09:19.700 --> 00:09:21.880
For that, we use a 4-bit operation code.

00:09:21.880 --> 00:09:26.980
We’ll talk about this more in a later episode, but in brief, 1000 might be the command

00:09:27.000 --> 00:09:33.279
to add, while 1100 is the command for subtract. Basically, the operation code tells the ALU

00:09:33.280 --> 00:09:38.600
what operation to perform. And the result of that operation on inputs A and B is an 8-bit output.

00:09:38.600 --> 00:09:43.760
ALUs also output a series of Flags, which are 1-bit outputs for particular states and statuses.

00:09:43.760 --> 00:09:50.260
For example, if we subtract two numbers, and the result is 0, our zero-testing circuit, the one we made earlier,

00:09:50.260 --> 00:09:55.300
sets the Zero Flag to True (1). This is useful if we are trying to determine if two numbers are are equal.

00:09:55.300 --> 00:09:57.740
If we wanted to test if A was less than B,

00:09:57.740 --> 00:10:03.220
we can use the ALU to calculate A subtract B and look to see if the Negative Flag was set to true.

00:10:03.220 --> 00:10:05.700
If it was, we know that A was
smaller than B.

00:10:05.700 --> 00:10:09.620
And finally, there’s also a wire attached to the carry out on the adder we built,

00:10:09.620 --> 00:10:13.980
so if there is an overflow, we’ll know about it. This is called the Overflow Flag.

00:10:13.980 --> 00:10:18.820
Fancier ALUs will have more flags, but these three flags are universal and frequently used.

00:10:18.840 --> 00:10:21.380
In fact, we’ll be using them soon in a future episode.

00:10:21.380 --> 00:10:25.640
So now you know how your computer does all its basic mathematical operations digitally

00:10:25.640 --> 00:10:27.440
with no gears or levers required.

00:10:27.440 --> 00:10:31.580
We’re going to use this ALU when we construct our CPU two episodes from now.

00:10:31.600 --> 00:10:36.560
But before that, our computer is going to need some memory! We'll talk about that next week.
