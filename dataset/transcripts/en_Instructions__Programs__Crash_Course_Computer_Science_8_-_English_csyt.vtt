WEBVTT - https://subtitletools.com

00:00:03.020 --> 00:00:06.140
Hi, I’m Carrie Anne and this is Crash Course
Computer Science!

00:00:06.140 --> 00:00:10.070
Last episode, we combined an ALU, control
unit, some memory, and a clock together to

00:00:10.070 --> 00:00:14.780
make a basic, but functional Central Processing
Unit – or CPU – the beating, ticking heart

00:00:14.780 --> 00:00:15.800
of a computer.

00:00:15.800 --> 00:00:19.529
We’ve done all the hard work of building
many of these components from the electronic

00:00:19.529 --> 00:00:23.900
circuits up, and now it’s time to give our
CPU some actual instructions to process!

00:00:23.900 --> 00:00:28.189
The thing that makes a CPU powerful is the
fact that it is programmable – if you write

00:00:28.189 --> 00:00:31.859
a different sequence of instructions, then
the CPU will perform a different task.

00:00:31.860 --> 00:00:36.200
So the CPU is a piece of hardware which is
controlled by easy-to-modify software!

00:00:36.200 --> 00:00:44.880
INTRO

00:00:44.880 --> 00:00:48.610
Let’s quickly revisit the simple program
that we stepped through last episode.

00:00:48.610 --> 00:00:50.740
The computer memory looked like this.

00:00:50.740 --> 00:00:52.370
Each address contained 8 bits of data.

00:00:52.370 --> 00:00:57.970
For our hypothetical CPU, the first four bits
specified the operation code, or opcode, and

00:00:57.970 --> 00:01:00.920
the second set of four bits specified an address
or registers.

00:01:00.920 --> 00:01:04.530
In memory address zero we have 0010 1110.

00:01:04.530 --> 00:01:10.229
Again, those first four bits are our opcode
which corresponds to a “LOAD_A” instruction.

00:01:10.229 --> 00:01:14.969
This instruction reads data from a location
of memory specified in those last four bits

00:01:14.969 --> 00:01:21.240
of the instruction and saves it into Register
A. In this case, 1110, or 14 in decimal.

00:01:21.240 --> 00:01:27.680
So let’s not think of this of memory address
0 as “0010 1110”, but rather as the instruction

00:01:27.680 --> 00:01:28.680
“LOAD_A 14”.

00:01:28.680 --> 00:01:30.689
That’s much easier to read and understand!

00:01:30.689 --> 00:01:31.920
And for me to say!

00:01:31.920 --> 00:01:35.140
And we can do the same thing for the rest
of the data in memory.

00:01:35.140 --> 00:01:39.250
In this case, our program is just four instructions
long, and we’ve put some numbers into memory

00:01:39.250 --> 00:01:41.499
too, 3 and 14.

00:01:41.499 --> 00:01:42.819
So now let’s step through this program:

00:01:42.819 --> 00:01:47.709
First is LOAD_A 14, which takes the value
in address 14, which is the number 3, and

00:01:47.709 --> 00:01:49.069
stores it into Register A.

00:01:49.069 --> 00:01:54.039
Then we have a “LOAD_B 15” instruction,
which takes the value in memory location 15,

00:01:54.039 --> 00:01:56.539
which is the number 14, and saves it into
Register B.

00:01:56.540 --> 00:01:57.540
Okay.

00:01:57.540 --> 00:01:58.440
Easy enough.

00:01:58.620 --> 00:02:00.320
But now we have an “ADD” instruction.

00:02:00.320 --> 00:02:04.939
This tells the processor to use the ALU to
add two registers together, in this case,

00:02:04.940 --> 00:02:06.640
B and A are specified.

00:02:06.640 --> 00:02:11.840
The ordering is important, because the resulting sum is saved into the second register that’s specified.

00:02:11.840 --> 00:02:15.200
So in this case, the resulting sum is saved
into Register A.

00:02:15.200 --> 00:02:19.810
And finally, our last instruction is “STORE_A
13”, which instructs the CPU to write whatever

00:02:19.810 --> 00:02:23.450
value is in Register A into memory location
13.

00:02:23.450 --> 00:02:24.450
Yesss!

00:02:24.450 --> 00:02:26.000
Our program adds two numbers together.

00:02:26.000 --> 00:02:30.170
That’s about as exciting as it gets when
we only have four instructions to play with.

00:02:30.170 --> 00:02:31.180
So let’s add some more!

00:02:31.180 --> 00:02:35.680
Now we’ve got a subtract function, which
like ADD, specifies two registers to operate on.

00:02:35.720 --> 00:02:38.300
We’ve also got a fancy new instruction called
JUMP.

00:02:38.300 --> 00:02:42.040
As the name implies, this causes the program
to “jump” to a new location.

00:02:42.040 --> 00:02:45.380
This is useful if we want to change the order
of instructions, or choose to skip some instructions.

00:02:45.380 --> 00:02:48.950
For example, a JUMP 0, would cause the program
to go back to the beginning.

00:02:48.950 --> 00:02:53.280
At a low level, this is done by writing the
value specified in the last four bits into

00:02:53.280 --> 00:02:56.570
the instruction address register, overwriting
the current value.

00:02:56.570 --> 00:03:00.400
We’ve also added a special version of JUMP
called JUMP_NEGATIVE.

00:03:00.400 --> 00:03:04.170
This only jumps the program if the ALU’s
negative flag is set to true.

00:03:04.170 --> 00:03:08.900
As we talked about in Episode 5, the negative
flag is only set when the result of an arithmetic

00:03:08.900 --> 00:03:10.580
operation is negative.

00:03:10.580 --> 00:03:14.140
If the result of the arithmetic was zero or
positive, the negative flag would not be set.

00:03:14.140 --> 00:03:19.260
So the JUMP NEGATIVE won’t jump anywhere, and the CPU will just continue on to the next instruction.

00:03:19.320 --> 00:03:24.160
And finally, computers need to be told when
to stop processing, so we need a HALT instruction.

00:03:24.220 --> 00:03:28.090
Our previous program really should have looked
like this to be correct, otherwise the CPU

00:03:28.090 --> 00:03:32.430
would have just continued on after the STORE
instruction, processing all those 0’s.

00:03:32.430 --> 00:03:36.580
But there is no instruction with an opcode
of 0, and so the computer would have crashed!

00:03:36.580 --> 00:03:40.420
It’s important to point out here that we’re
storing both instructions and data in the

00:03:40.420 --> 00:03:41.420
same memory.

00:03:41.420 --> 00:03:43.850
There is no difference fundamentally -- it’s
all just binary numbers.

00:03:43.850 --> 00:03:47.680
So the HALT instruction is really important
because it allows us to separate the two.

00:03:47.680 --> 00:03:51.640
Okay, so let’s make our program a bit more
interesting, by adding a JUMP.

00:03:51.640 --> 00:03:55.480
We’ll also modify our two starting values
in memory to 1 and 1.

00:03:55.480 --> 00:03:58.290
Lets step through this program just as our
CPU would.

00:03:58.290 --> 00:04:01.480
First, LOAD_A 14 loads the value 1 into Register A.

00:04:01.480 --> 00:04:05.370
Next, LOAD_B 15 loads the value 1 into Register B.

00:04:05.370 --> 00:04:11.020
As before, we ADD registers B and A together,
with the sum going into Register A. 1+1 = 2,

00:04:11.020 --> 00:04:15.160
so now Register A has the value 2 in it (stored
in binary of course)

00:04:15.160 --> 00:04:18.720
Then the STORE instruction saves that into
memory location 13.

00:04:18.720 --> 00:04:20.780
Now we hit a “JUMP 2” instruction.

00:04:20.780 --> 00:04:24.850
This causes the processor to overwrite the
value in the instruction address register,

00:04:24.850 --> 00:04:27.050
which is currently 4, with the new value, 2.

00:04:27.050 --> 00:04:31.470
Now, on the processor’s next fetch cycle,
we don’t fetch HALT, instead we fetch the

00:04:31.470 --> 00:04:34.140
instruction at memory location 2, which is
ADD B A.

00:04:34.140 --> 00:04:35.160
We’ve jumped!

00:04:35.160 --> 00:04:38.900
Register A contains the value 2, and register
B contains the value 1.

00:04:38.900 --> 00:04:42.930
So 1+2 = 3, so now Register A has the value 3.

00:04:42.930 --> 00:04:44.520
We store that into memory.

00:04:44.520 --> 00:04:47.540
And we’ve hit the JUMP again, back to ADD
B A.

00:04:47.540 --> 00:04:49.040
1+3 = 4.

00:04:49.040 --> 00:04:51.190
So now register A has the value 4.

00:04:51.190 --> 00:04:52.400
See what's happening here?

00:04:52.420 --> 00:04:53.860
Every loop, we’re adding one.

00:04:53.870 --> 00:04:54.860
Its counting up!

00:04:54.870 --> 00:04:55.870
Cooooool.

00:04:55.870 --> 00:04:57.470
But notice there’s no way to ever escape.

00:04:57.470 --> 00:05:01.190
We’re never.. ever.. going to get to that
halt instruction, because we’re always going

00:05:01.190 --> 00:05:02.350
to hit that JUMP.

00:05:02.350 --> 00:05:07.270
This is called an infinite loop – a program
that runs forever… ever… ever… ever…

00:05:07.270 --> 00:05:07.920
ever

00:05:08.000 --> 00:05:10.040
To break the loop, we need a conditional jump.

00:05:10.040 --> 00:05:13.190
A jump that only happens if a certain condition is met.

00:05:13.190 --> 00:05:18.560
Our JUMP_NEGATIVE is one example of a conditional
jump, but computers have other types too - like

00:05:18.560 --> 00:05:20.840
JUMP IF EQUAL and JUMP IF GREATER.

00:05:20.840 --> 00:05:24.390
So let’s make our code a little fancier
and step through it.

00:05:24.390 --> 00:05:28.720
Just like before, the program starts by loading
values from memory into registers A and B.

00:05:28.720 --> 00:05:34.100
In this example, the number 11 gets loaded
into Register A, and 5 gets loaded into Register B.

00:05:34.100 --> 00:05:39.620
Now we subtract register B from register A.
That’s 11 minus 5, which is 6, and so 6

00:05:39.620 --> 00:05:40.850
gets saved into Register A.

00:05:40.850 --> 00:05:42.550
Now we hit our JUMP NEGATIVE.

00:05:42.550 --> 00:05:44.380
The last ALU result was 6.

00:05:44.380 --> 00:05:47.660
That’s a positive number, so the the negative
flag is false.

00:05:47.660 --> 00:05:49.620
That means the processor does not jump.

00:05:49.620 --> 00:05:51.580
So we continue on to the next instruction...

00:05:51.580 --> 00:05:52.640
...which is a JUMP 2.

00:05:52.640 --> 00:05:56.400
No conditional on this one, so we jump to
instruction 2 no matter what.

00:05:56.440 --> 00:06:01.420
Ok, so we’re back at our SUBTRACT Register
B from Register A. 6 minus 5 equals 1.

00:06:01.420 --> 00:06:03.260
So 1 gets saved into register A.

00:06:03.260 --> 00:06:04.260
Next instruction.

00:06:04.260 --> 00:06:06.040
We’re back again at our JUMP NEGATIVE.

00:06:06.040 --> 00:06:11.930
1 is also a positive number, so the CPU continues
on to the JUMP 2, looping back around again

00:06:11.930 --> 00:06:13.680
to the SUBTRACT instruction.

00:06:13.680 --> 00:06:14.970
This time is different though.

00:06:14.970 --> 00:06:17.350
1 minus 5 is negative 4.

00:06:17.350 --> 00:06:20.690
And so the ALU sets its negative flag to true
for the first time.

00:06:20.690 --> 00:06:23.260
Now, when we advance to the next instruction,

00:06:23.260 --> 00:06:27.400
JUMP_NEGATIVE 5, the CPU executes the jump
to memory location 5.

00:06:27.400 --> 00:06:29.160
We’re out of the infinite loop!

00:06:29.160 --> 00:06:35.500
Now we have a ADD B to A. Negative 4 plus
5, is positive 1, and we save that into Register A.

00:06:35.500 --> 00:06:39.760
Next we have a STORE instruction that saves
Register A into memory address 13.

00:06:39.760 --> 00:06:43.660
Lastly, we hit our HALT instruction and the
computer rests.

00:06:43.660 --> 00:06:49.750
So even though this program is only 7 instructions
long, the CPU ended up executing 13 instructions,

00:06:49.750 --> 00:06:52.040
and that's because it looped twice internally.

00:06:52.040 --> 00:06:56.380
This code calculated the remainder if we divide
5 into 11, which is one.

00:06:56.380 --> 00:07:00.660
With a few extra lines of code, we could also
keep track of how many loops we did, the count

00:07:00.660 --> 00:07:05.729
of which would be how many times 5 went into
11… we did two loops, so that means 5 goes

00:07:05.729 --> 00:07:08.470
into 11 two times... with a remainder of 1.

00:07:08.470 --> 00:07:12.449
And of course this code could work for any
two numbers, which we can just change in memory

00:07:12.449 --> 00:07:17.280
to whatever we want: 7 and 81, 18 and 54,
it doesn’t matter -- that’s the power

00:07:17.280 --> 00:07:18.280
of software!

00:07:18.280 --> 00:07:21.480
Software also allowed us to do something our
hardware could not.

00:07:21.480 --> 00:07:26.240
Remember, our ALU didn’t have the functionality
to divide two numbers, instead it’s the

00:07:26.240 --> 00:07:28.770
program we made that gave us that functionality.

00:07:28.770 --> 00:07:32.729
And then other programs can use our divide
program to do even fancier things.

00:07:32.729 --> 00:07:34.140
And you know what that means.

00:07:34.140 --> 00:07:41.780
New levels of abstraction!

00:07:41.780 --> 00:07:46.520
So, our hypothetical CPU is very basic – all
of its instructions are 8 bits long, with

00:07:46.521 --> 00:07:49.700
the opcode occupying only the first four bits.

00:07:49.700 --> 00:07:54.370
So even if we used every combination of 4
bits, our CPU would only be able to support

00:07:54.370 --> 00:07:56.790
a maximum of 16 different instructions.

00:07:56.790 --> 00:08:01.720
On top of that, several of our instructions
used the last 4 bits to specify a memory location.

00:08:01.720 --> 00:08:06.639
But again, 4 bits can only encode 16 different
values, meaning we can address a maximum of

00:08:06.640 --> 00:08:10.210
16 memory locations - that’s not a lot to work with.

00:08:10.210 --> 00:08:15.120
For example, we couldn’t even JUMP to location
17, because we literally can’t fit the number

00:08:15.120 --> 00:08:16.830
17 into 4 bits.

00:08:16.830 --> 00:08:19.840
For this reason, real, modern CPUs use two
strategies.

00:08:19.840 --> 00:08:23.850
The most straightforward approach is just
to have bigger instructions, with more bits,

00:08:23.850 --> 00:08:25.920
like 32 or 64 bits.

00:08:25.920 --> 00:08:28.240
This is called the instruction length.

00:08:28.240 --> 00:08:29.240
Unsurprisingly.

00:08:29.240 --> 00:08:32.130
The second approach is to use variable length
instructions.

00:08:32.130 --> 00:08:35.539
For example, imagine a CPU that uses 8 bit
opcodes.

00:08:35.539 --> 00:08:40.050
When the CPU sees an instruction that needs
no extra values, like the HALT instruction,

00:08:40.050 --> 00:08:41.640
it can just execute it immediately.

00:08:41.640 --> 00:08:45.430
However, if it sees something like a JUMP
instruction, it knows it must also fetch

00:08:45.430 --> 00:08:50.090
the address to jump to, which is saved immediately
behind the JUMP instruction in memory.

00:08:50.090 --> 00:08:52.890
This is called, logically enough, an Immediate
Value.

00:08:52.890 --> 00:08:56.850
In such processor designs, instructions can
be any number of bytes long, which makes the

00:08:56.850 --> 00:08:59.160
fetch cycle of the CPU a tad more complicated.

00:08:59.160 --> 00:09:04.520
Now, our example CPU and instruction set is hypothetical, designed to illustrate key working

00:09:04.520 --> 00:09:05.520
principles.

00:09:05.520 --> 00:09:07.860
So I want to leave you with a real CPU example.

00:09:07.860 --> 00:09:11.150
In 1971, Intel released the 4004 processor.

00:09:11.150 --> 00:09:15.880
It was the first CPU put all into a single
chip and paved the path to the intel processors

00:09:15.880 --> 00:09:17.160
we know and love today.

00:09:17.160 --> 00:09:19.740
It supported 46 instructions, shown here.

00:09:19.740 --> 00:09:22.230
Which was enough to build an entire working
computer.

00:09:22.230 --> 00:09:26.860
And it used many of the instructions we’ve
talked about like JUMP ADD SUBTRACT and LOAD.

00:09:26.860 --> 00:09:31.710
It also uses 8-bit immediate values, like
we just talked about, for things like JUMPs,

00:09:31.710 --> 00:09:33.260
in order to address more memory.

00:09:33.260 --> 00:09:36.310
And processors have come a long way since 1971.

00:09:36.310 --> 00:09:41.130
A modern computer processor, like an Intel
Core i7, has thousands of different instructions

00:09:41.130 --> 00:09:44.360
and instruction variants, ranging from one
to fifteen bytes long.

00:09:44.360 --> 00:09:48.010
For example, there’s over a dozens different
opcodes just for variants of ADD!

00:09:48.010 --> 00:09:52.500
And this huge growth in instruction set size
is due in large part to extra bells and whistles

00:09:52.510 --> 00:09:57.520
that have been added to processor designs
overtime, which we’ll talk about next episode.

00:09:57.520 --> 00:09:58.560
See you next week!
